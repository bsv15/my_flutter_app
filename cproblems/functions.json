[
  {
    "topic": "Functions",
    "level": "Easy",
    "title": "Simple Greeting Function",
    "description": "Write a C program that defines a function named `greet` which takes no arguments and returns nothing (`void`). This function should simply print 'Hello from a function!' to the console. Call this function from `main`.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "Hello from a function!"
  },
  {
    "topic": "Functions",
    "level": "Easy",
    "title": "Sum Function (Return Value)",
    "description": "Define a C function named `add` that takes two integers as arguments and returns their sum. In `main`, read two integers from the user, call the `add` function with these numbers, and print the returned sum.",
    "constraints": "Input integers will be between -1000 and 1000.",
    "sampleInput": "15\n25",
    "sampleOutput": "Sum: 40"
  },
  {
    "topic": "Functions",
    "level": "Medium",
    "title": "Cube Calculator Function",
    "description": "Define a C function `calculateCube` that takes an integer `num` as input and returns its cube (`num * num * num`). In `main`, read an integer, call `calculateCube`, and print the result. Use proper function prototyping.",
    "constraints": "Input integer will be between 1 and 10.",
    "sampleInput": "4",
    "sampleOutput": "Cube of 4: 64"
  },
  {
    "topic": "Functions",
    "level": "Medium",
    "title": "Check Even/Odd Function",
    "description": "Write a C function `isEven` that takes an integer and returns `1` if the number is even, and `0` otherwise. In `main`, read an integer, call `isEven`, and print 'Even' or 'Odd' based on the function's return value.",
    "constraints": "Input integer will be between -1000 and 1000.",
    "sampleInput": "7",
    "sampleOutput": "Odd"
  },
  {
    "topic": "Functions",
    "level": "Medium",
    "title": "Simple Power Function",
    "description": "Implement a C function `power(base, exponent)` that calculates `base` raised to the power of `exponent` (positive integer only). Do not use `pow()` from `<math.h>`. Use a loop. In `main`, take `base` (integer) and `exponent` (positive integer) as input, call your function, and print the result.",
    "constraints": "Base: 1-10. Exponent: 0-5. Result fits in `int`.",
    "sampleInput": "2\n3",
    "sampleOutput": "2 to the power of 3: 8"
  },
  {
    "topic": "Functions",
    "level": "Hard",
    "title": "Prime Number Checker Function",
    "description": "Refactor the 'Prime Number Checker' logic (from 'Loops and Iteration') into a reusable C function `isPrime(int num)`. This function should return `1` if `num` is prime, and `0` otherwise. In `main`, take an integer `N` as input, and use a loop to find and print all prime numbers up to `N` using your `isPrime` function.",
    "constraints": "N will be between 2 and 50.",
    "sampleInput": "20",
    "sampleOutput": "Prime numbers up to 20: 2 3 5 7 11 13 17 19"
  },
  {
    "topic": "Functions",
    "level": "Hard",
    "title": "GCD (Greatest Common Divisor) Function",
    "description": "Implement a C function `findGCD(int a, int b)` that calculates the Greatest Common Divisor (GCD) of two positive integers using the Euclidean algorithm (using loops or recursion). In `main`, read two integers and print their GCD using your function.",
    "constraints": "Input integers will be between 1 and 1000.",
    "sampleInput": "48\n18",
    "sampleOutput": "GCD of 48 and 18: 6"
  },
  {
    "topic": "Functions",
    "level": "Hard",
    "title": "Factorial (Recursive) Function",
    "description": "Implement the factorial calculation using a **recursive** C function `factorial(int n)`. The function should return `n * factorial(n-1)` with a base case for `n=0`. In `main`, read a non-negative integer and print its factorial. Handle negative input gracefully (e.g., print an error or return -1).",
    "constraints": "Input `n` will be between 0 and 12 (to avoid overflow for `int`).",
    "sampleInput": "6",
    "sampleOutput": "Factorial of 6: 720"
  },
  {
    "topic": "Functions",
    "level": "Tricky",
    "title": "Understanding Call by Value",
    "description": "Write a C program with a function `modifyValue(int num)` that attempts to increment `num` by 10. In `main`, declare an integer `myNum`, initialize it to 5, call `modifyValue` with `myNum`, and then print `myNum`'s value *after* the function call. Explain why `myNum`'s value doesn't change despite the modification inside the function.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "Value of myNum after modification attempt: 5\n(User's explanation of call by value)"
  },
  {
    "topic": "Functions",
    "level": "Real World Problem",
    "title": "Simple Unit Converter Functions",
    "description": "Create a C program that acts as a simple unit converter. Define two functions:\n1. `metersToFeet(float meters)`: Converts meters to feet (1 meter = 3.28084 feet).\n2. `kgToPounds(float kg)`: Converts kilograms to pounds (1 kg = 2.20462 pounds).\nIn `main`, read a value in meters and a value in kg. Call the respective functions and print the converted values to two decimal places.",
    "constraints": "Input values: 0.0 to 1000.0.",
    "sampleInput": "10.0\n5.0",
    "sampleOutput": "10.00 meters is 32.81 feet\n5.00 kg is 11.02 pounds"
  }
]

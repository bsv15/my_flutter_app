[
  {
    "topic": "Structures",
    "level": "Easy",
    "title": "Define and Initialize a Basic Structure",
    "description": "Write a C program that defines a simple structure named `Point`. This structure should contain two integer members: `x` and `y`, representing coordinates in a 2D plane. Declare a variable of type `struct Point` in your `main` function. Initialize its `x` member to 10 and its `y` member to 20. Finally, print the values of both `x` and `y` members using the structure variable, clearly indicating them as coordinates. This problem introduces the fundamental concept of defining and initializing a `struct`.",
    "constraints": "The structure `Point` must have `x` and `y` as integer members. Initialization values are fixed.",
    "sampleInput": "None",
    "sampleOutput": "Point coordinates: (10, 20)",
    "explanation": "The output `Point coordinates: (10, 20)` is a direct result of initializing the `x` member of the `Point` structure variable to `10` and the `y` member to `20`. The `printf()` function then accesses these stored values and displays them in the specified coordinate format."
  },
  {
    "topic": "Structures",
    "level": "Easy",
    "title": "Accessing Structure Members with Dot Operator",
    "description": "Define a structure named `Book` with two members: `title` (a character array capable of holding a string up to 50 characters) and `pages` (an integer). In your `main` function, declare a `Book` variable. Assign the string \"The C Programming Language\" to its `title` member and the integer 272 to its `pages` member. Print both the book's title and its number of pages to the console, using the dot operator (`.`) to access the members. This problem reinforces direct member access for `struct` variables.",
    "constraints": "Title string max 50 chars including null terminator. Pages must be a positive integer.",
    "sampleInput": "None",
    "sampleOutput": "Book Title: The C Programming Language\nNumber of Pages: 272",
    "explanation": "The output `Book Title: The C Programming Language` shows the string assigned to the `title` member of the `Book` structure. The subsequent line, `Number of Pages: 272`, displays the integer value assigned to the `pages` member. Both pieces of information are printed by directly accessing the respective members using the **dot operator** (`.`) on the `Book` structure variable."
  },
  {
    "topic": "Structures",
    "level": "Medium",
    "title": "Array of Structures (Student Records)",
    "description": "Define a structure named `Student` with members `id` (an integer) and `name` (a character array capable of holding a string up to 30 characters). Declare an array capable of holding 3 `Student` structures. Populate this array with sample data for three students (e.g., hardcode their IDs and names). Then, use a `for` loop to iterate through the array and print the `id` and `name` of each student on a separate line. This problem demonstrates how to create and manage collections of structured data.",
    "constraints": "Array size is fixed at 3 students. Student IDs will be positive integers (1-100). Names will be valid strings, max 30 chars.",
    "sampleInput": "None (data is hardcoded within the program)",
    "sampleOutput": "Student 1: ID 101, Name Alice\nStudent 2: ID 102, Name Bob\nStudent 3: ID 103, Name Charlie",
    "explanation": "The output displays the hardcoded details of three students. The program initializes an **array of `Student` structures** with specific `id` and `name` values for 'Alice', 'Bob', and 'Charlie'. A `for` loop then iterates through this array, and for each student structure, it accesses and prints the `id` and `name` members on a new line, exactly as shown in the sample output."
  },
  {
    "topic": "Structures",
    "level": "Medium",
    "title": "Accessing Structure Members via Pointers (Arrow Operator)",
    "description": "Define a structure named `Rectangle` with two floating-point members: `length` and `width`. In `main`, declare a `Rectangle` variable, `myRect`. Also, declare a pointer to a `Rectangle` structure, `rectPtr`. Make `rectPtr` point to `myRect`. Using the **arrow operator (`->`)** with `rectPtr`, set the `length` of `myRect` to 10.5 and its `width` to 5.0. Then, calculate and print the area of the rectangle (`length * width`), accessing `length` and `width` again via `rectPtr` and the arrow operator. This problem is essential for understanding how to interact with structures using pointers.",
    "constraints": "None. The values for length and width are fixed for demonstration.",
    "sampleInput": "None",
    "sampleOutput": "Initial values (before pointer modification):\nLength: [some_default_or_garbage_val], Width: [some_default_or_garbage_val]\nRectangle area after modification via pointer: 52.50",
    "explanation": "The first two lines of output show placeholder or garbage values because the `myRect` variable's members aren't explicitly initialized before being printed. The critical part is the final line, `Rectangle area after modification via pointer: 52.50`. This value is the result of `10.5 * 5.0 = 52.50`. This indicates that the `length` and `width` members of `myRect` were successfully set to `10.5` and `5.0` respectively, by using the **arrow operator (`->`)** with `rectPtr`, and then these modified values were used to calculate and print the area."
  },
  {
    "topic": "Structures",
    "level": "Medium",
    "title": "Nested Structures (Person with Date of Birth)",
    "description": "Define two structures:\n1.  `struct Date`: with integer members `day`, `month`, and `year`.\n2.  `struct Person`: with a character array `name` (max 30 chars) and a member `dob` of type `struct Date` (this makes `Date` a nested structure within `Person`).\nIn your `main` function, declare a variable of type `struct Person`. Initialize its `name` and its nested `dob` members (e.g., for John Doe, born August 15, 1990). Print the person's name and their full date of birth in a user-friendly format (e.g., 'Name: John Doe, DOB: 15/08/1990'). This problem illustrates how structures can contain other structures.",
    "constraints": "Name max 30 chars. Date values will form a valid date.",
    "sampleInput": "None (data is hardcoded)",
    "sampleOutput": "Name: John Doe, DOB: 15/08/1990",
    "explanation": "The output `Name: John Doe, DOB: 15/08/1990` is generated by initializing a `struct Person` variable with the name \"John Doe\" and a nested `struct Date` variable within it, set to day 15, month 08, and year 1990. The `printf()` statement then accesses these members (including the nested `dob`'s day, month, and year) to construct and display the formatted output string."
  },
  {
    "topic": "Structures",
    "level": "Hard",
    "title": "Function Returning a Structure (Complex Number Addition)",
    "description": "Define a structure named `Complex` with two floating-point members: `real` and `imag` (for the real and imaginary parts of a complex number). Write a C function `struct Complex addComplex(struct Complex c1, struct Complex c2)` that takes two `Complex` structures as input arguments. This function should calculate their sum (sum of real parts and sum of imaginary parts) and **return a new `Complex` structure** representing this sum. In your `main` function, prompt the user to input the real and imaginary parts for two complex numbers. Call your `addComplex` function, and then print the resulting sum complex number formatted as `X.XX + Y.YYi`. This problem demonstrates returning entire structures from functions.",
    "constraints": "Real and imaginary parts will be floating-point numbers between -100.0 and 100.0. The sum will also fit in `float`.",
    "sampleInput": "Enter complex number 1 (real imag): 3.0 2.0\nEnter complex number 2 (real imag): 1.0 4.0",
    "sampleOutput": "Sum of complex numbers: 4.00 + 6.00i",
    "explanation": "The output `Sum of complex numbers: 4.00 + 6.00i` is the sum of the two input complex numbers. Given the first complex number `3.0 + 2.0i` and the second `1.0 + 4.0i`, the program's `addComplex` function computes the sum of their real parts ($3.0 + 1.0 = 4.0$) and the sum of their imaginary parts ($2.0 + 4.0 = 6.0$). The `main` function then receives this resulting `Complex` structure and prints its `real` and `imag` components in the specified format."
  },
  {
    "topic": "Structures",
    "level": "Hard",
    "title": "Dynamic Array of Structures (Product Inventory)",
    "description": "Develop a C program to manage a small inventory of products. Define a structure `Product` with an `id` (integer) and `price` (float). Prompt the user to enter the `number_of_products` they want to store. Then, dynamically allocate an array of `Product` structures using `malloc()` to accommodate this many products. For each product, prompt the user to enter its ID and price, storing this data in the dynamically allocated array. Finally, iterate through the array and print the `id` and `price` of each product. Remember the critical step: **`free()` the allocated memory** after use to prevent memory leaks. This problem combines structures with dynamic memory allocation.",
    "constraints": "The `number_of_products` `N` will be between 1 and 5. Product IDs will be integers between 1 and 100. Prices will be floating-point numbers between 0.01 and 1000.00.",
    "sampleInput": "Enter number of products: 2\nEnter Product 1 ID and Price: 101 25.50\nEnter Product 2 ID and Price: 102 75.00",
    "sampleOutput": "Product Inventory:\nProduct ID: 101, Price: $25.50\nProduct ID: 102, Price: $75.00\nMemory for products freed.",
    "explanation": "The output reflects the user's input for two products. The program first prompts for `number of products` (2). It then dynamically allocates memory for two `Product` structures. For each product, it reads the provided `ID` and `Price` (`101` and `25.50` for the first, `102` and `75.00` for the second) and stores them in the allocated structures. Finally, it iterates through this dynamically created array, printing the `ID` and `Price` of each product in the specified format, followed by a confirmation that the memory was freed."
  },
  {
    "topic": "Structures",
    "level": "Hard",
    "title": "Employee Data Management with Function for Display",
    "description": "Define a `struct Employee` with members: `id` (integer), `name` (character array, max 30 chars), and `salary` (floating-point). Implement a separate function `void displayEmployee(struct Employee emp)` that takes a single `Employee` structure *by value* and prints all its details (ID, Name, Salary) in a well-formatted manner. In your `main` function, create an array capable of holding 3 `Employee` structures. Populate their data (either by hardcoding sample data or by prompting the user for input). Finally, use a loop to iterate through your array of employees and call the `displayEmployee` function for each employee to print their details. This problem combines structures with arrays and function calls.",
    "constraints": "Array size fixed at 3 employees. ID: 1-999. Name: max 30 chars. Salary: 1000.00-100000.00.",
    "sampleInput": "None (or user input for 3 employees, e.g., Alice, 50000; Bob, 60000; Charlie, 75000)",
    "sampleOutput": "--- Employee Details ---\nEmployee ID: 101, Name: Alice, Salary: $50000.00\nEmployee ID: 102, Name: Bob, Salary: $60000.00\nEmployee ID: 103, Name: Charlie, Salary: $75000.00",
    "explanation": "The output `--- Employee Details ---` followed by three lines of employee information is a direct result of the program initializing an array with three `Employee` structures (e.g., hardcoded with ID 101, Alice, $50000.00; ID 102, Bob, $60000.00; ID 103, Charlie, $75000.00). A loop then iterates through this array, and for each employee, it calls the `displayEmployee` function. This function receives a copy of the `Employee` structure and prints its `id`, `name`, and `salary` in the specified formatted manner for each of the three employees."
  },
  {
    "topic": "Structures",
    "level": "Tricky",
    "title": "Structure Padding and `sizeof` Operator",
    "description": "Write a C program that defines a structure named `Data` with the following members, in this specific order:\n`char c1;`\n`int i;`\n`char c2;`\nUse the `sizeof` operator to print the total size of `struct Data`. In your solution, explain *why* the size printed by `sizeof(Data)` might be larger than the sum of the individual sizes of its members (`sizeof(char) + sizeof(int) + sizeof(char)`). Relate your explanation to the concept of **structure padding** and **memory alignment**, which compilers perform to optimize memory access for different data types. This problem delves into low-level memory organization.",
    "constraints": "The structure members and their order are fixed. The size of `int` is typically 4 bytes, `char` is 1 byte, but padding can vary.",
    "sampleInput": "None",
    "sampleOutput": "Size of struct Data: [e.g., 12 or 16, depending on system architecture and compiler]",
    "explanation": "The output `Size of struct Data: [e.g., 12 or 16]` shows the total memory occupied by the `struct Data`. This value is typically larger than the sum of its individual member sizes (`1 byte for char + 4 bytes for int + 1 byte for char = 6 bytes` on a common system). This difference is due to **structure padding** and **memory alignment**. Compilers add unused bytes (padding) between members to ensure that each member starts at a memory address that is a multiple of its data type's natural alignment requirement. This optimizes memory access performance. For example, an `int` often needs to start on a 4-byte boundary. So, after `char c1` (1 byte), 3 padding bytes might be added before `int i` to align it. Then, after `int i` (4 bytes) and `char c2` (1 byte), additional padding bytes might be added at the end of the structure to make the total size a multiple of the largest member's alignment (often `sizeof(int)`), which is necessary when creating arrays of these structures."
  },
  {
    "topic": "Structures",
    "level": "Real World Problem",
    "title": "Library Book Inventory Management System",
    "description": "Design and implement a basic C program for a library's book inventory. Define a `struct Book` with the following members: `title` (string, max 100 chars), `author` (string, max 50 chars), `publication_year` (integer), and `is_available` (integer, 1 for true, 0 for false). Your program should provide a menu-driven interface allowing the user to:\n1.  **Add a New Book:** Prompt for all book details and store them in a dynamically allocated array of `Book` structures. If the array needs more space, use `realloc`.\n2.  **Display All Books:** Iterate through the stored books and print their details neatly.\n3.  **Exit:** Terminate the program, ensuring all dynamically allocated memory is `free`d.\nThis problem integrates structures, dynamic memory allocation (`malloc`, `realloc`, `free`), functions, and loop-based menu interaction, reflecting a common data management task.",
    "constraints": "The system should initially accommodate a small number of books (e.g., 2), and be able to grow using `realloc`. Max 5 books for practical testing. Titles/Authors max length as specified. Publication year between 1900 and the current year. Availability (1 or 0).",
    "sampleInput": "Menu:\n1. Add Book\n2. Display All Books\n3. Exit\nEnter choice: 1\nTitle: C Programming Absolute Beginner's Guide\nAuthor: Greg Perry\nYear: 2014\nAvailable (1/0): 1\nEnter choice: 1\nTitle: Data Structures and Algorithms in C\nAuthor: Robert Lafore\nYear: 1986\nAvailable (1/0): 1\nEnter choice: 2\nEnter choice: 3",
    "sampleOutput": "--- Library Inventory ---\n1. Title: C Programming Absolute Beginner's Guide, Author: Greg Perry, Year: 2014, Available: Yes\n2. Title: Data Structures and Algorithms in C, Author: Robert Lafore, Year: 1986, Available: Yes\nExiting program. Memory freed.",
    "explanation": "The output demonstrates the flow of the menu-driven system. After the user selects option `1` (Add Book) twice, the program prompts for and stores the details for two books: 'C Programming Absolute Beginner's Guide' (2014) and 'Data Structures and Algorithms in C' (1986), both marked as available. When the user then selects option `2` (Display All Books), the program iterates through its stored data and prints the details of these two books in a formatted list. Finally, selecting option `3` (Exit) terminates the program, and the `Memory freed.` message confirms that dynamic memory allocated for the books has been released."
  }
]

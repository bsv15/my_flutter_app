[
  {
    "topic": "Structures and Unions",
    "level": "Easy",
    "title": "Define and Access a Simple Structure",
    "description": "This problem introduces **structures (`struct`)**, which allow you to group variables of different data types under a single name. Your program should: \n1. Define a `struct` named `Point` with two integer members: `x` and `y`. \n2. Declare a variable of type `struct Point`. \n3. Initialize its `x` and `y` members with values (e.g., 5 and 10). \n4. Access and print the `x` and `y` values using the dot operator (`.`). \nThis basic exercise demonstrates structure definition, variable declaration, and member access. The Flutter app will simply display the hardcoded point.",
    "constraints": "Structure named `Point` with `int x`, `int y` members. Initialize directly. Output must clearly label x and y.",
    "sampleInput": "None",
    "sampleOutput": "Point coordinates: (5, 10)\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Easy",
    "title": "Structure with User Input",
    "description": "Practice filling structure members with user-provided data. Your program should: \n1. Define a `struct` named `Student` with members: `int id`, `char name[50]`, and `float gpa`. \n2. Declare a variable of type `struct Student`. \n3. Read values for `id`, `name` (single word), and `gpa` from the user. \n4. Print all the student's details. \nThis problem combines structures with standard input/output (`scanf`, `printf`) to populate structured data. The Flutter app will provide the student details.",
    "constraints": "Structure named `Student`. `id` between 1 and 100. `name` max 49 chars (single word). `gpa` between 0.0 and 4.0. Output GPA to two decimal places.",
    "sampleInput": "101\nAlice\n3.75",
    "sampleOutput": "Student ID: 101\nStudent Name: Alice\nStudent GPA: 3.75\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Medium",
    "title": "Array of Structures",
    "description": "Learn to manage collections of structured data using an array of structures. Your program should: \n1. Define a `struct` named `Book` with members: `char title[100]`, `char author[50]`, `int year`. \n2. Declare an array of `struct Book` (e.g., `Book library[3];`). \n3. Read data for 3 books (title, author (single word), year) from the user and store them in the array. \n4. Iterate through the array and print the details of all books. \nThis problem is crucial for handling multiple records of the same type. The Flutter app will provide the details for 3 books.",
    "constraints": "Array size is 3. `title` max 99 chars, `author` max 49 chars (single words). Year between 1900 and 2024.",
    "sampleInput": "C Programming\nDennisRitchie\n1972\nEffective C\nRobertC\n2020\nClean Code\nRobertM\n2008",
    "sampleOutput": "Book 1: Title: C Programming, Author: DennisRitchie, Year: 1972\nBook 2: Title: Effective C, Author: RobertC, Year: 2020\nBook 3: Title: Clean Code, Author: RobertM, Year: 2008\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Medium",
    "title": "Structures and Pointers: Arrow Operator",
    "description": "Understand how to access structure members using pointers and the arrow operator (`->`). Your program should: \n1. Define a `struct` named `Rectangle` with `float length` and `float width`. \n2. Declare a variable `rect` of type `struct Rectangle`. \n3. Declare a pointer `ptr_rect` of type `struct Rectangle *` and make it point to `rect`. \n4. Assign values to `length` and `width` using `ptr_rect` and the arrow operator (`->`). \n5. Calculate and print the area of the rectangle using `ptr_rect` and `->`, formatted to two decimal places. \nThis problem teaches the essential `->` operator for pointer-to-structure access. The Flutter app will trigger this demonstration.",
    "constraints": "Structure named `Rectangle`. `length` and `width` positive floats between 1.0 and 100.0. Output area to two decimal places.",
    "sampleInput": "None",
    "sampleOutput": "Rectangle Area: 50.00\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Hard",
    "title": "Nested Structures: Student with Date of Birth",
    "description": "Explore nested structures, where one structure is a member of another. Your program should: \n1. Define a `struct Date` with `int day`, `int month`, `int year`. \n2. Define a `struct Student` with `int id`, `char name[50]`, and a member of type `struct Date` (e.g., `struct Date dob;`). \n3. Declare a `struct Student` variable. \n4. Read `id`, `name` (single word), `day`, `month`, `year` from the user. \n5. Print all details of the student, including their date of birth, in a formatted way. \nThis problem illustrates how to organize complex related data using nested structures and access their members using chained dot operators. The Flutter app will provide the student's details.",
    "constraints": "Student `id` between 1 and 100. Name max 49 chars. Date: valid day/month/year within reasonable ranges (e.g., year 1900-2024).",
    "sampleInput": "105\nJohnDoe\n15\n3\n2002",
    "sampleOutput": "Student ID: 105\nName: JohnDoe\nDate of Birth: 15/03/2002\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Hard",
    "title": "Union Basics: Memory Sharing",
    "description": "Understand **unions (`union`)**, which allow different members to share the *same memory location*. This is used to save memory when you know that only one member will be used at a time. Your program should: \n1. Define a `union Data` that can hold either an `int` (`i`), a `float` (`f`), or a `char` array (`str[20]`). \n2. Declare a variable of type `union Data`. \n3. Assign an integer value to `union_var.i` and print it. \n4. Now, assign a float value to `union_var.f` and print it. Observe how accessing `union_var.i` after this might yield garbage (due to memory overwrite). \n5. Assign a string to `union_var.str` and print it. \nThis problem highlights the memory-saving aspect and the 'at-most-one-member-at-a-time' nature of unions. The Flutter app will trigger these assignments and displays.",
    "constraints": "Demonstrate assignments to `int`, `float`, and `char[]` members of the union. Explain the memory overwrite behavior in comments.",
    "sampleInput": "None",
    "sampleOutput": "After assigning int: 10\nAfter assigning float: 3.140000\nInteger member (after float assignment): 1078523331 (Garbage/different value)\nAfter assigning string: Hello Union\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Tricky",
    "title": "Enum with Struct: Student Status",
    "description": "Combine `enum` (enumerated types) with `struct` to represent distinct states or categories. Your program should: \n1. Define an `enum` named `StudentStatus` with values `ENROLLED`, `GRADUATED`, `DROPOUT`. \n2. Define a `struct Student` with `int id`, `char name[50]`, and a member of type `enum StudentStatus` (e.g., `enum StudentStatus status;`). \n3. Declare a `struct Student` variable. \n4. Read `id`, `name`, and an integer representing the status (0 for ENROLLED, 1 for GRADUATED, 2 for DROPOUT). Convert this integer to the `enum` type. \n5. Print the student's ID, name, and a user-friendly string for their status (e.g., 'ENROLLED', 'GRADUATED'). You'll need `if-else if` or a `switch` statement to convert the `enum` value back to a readable string. \nThis problem integrates enums into structures for clearer, more maintainable code that represents fixed sets of choices. The Flutter app will provide the student data.",
    "constraints": "Student ID 1-100. Name max 49 chars. Status input 0, 1, or 2. Convert enum to string for output.",
    "sampleInput": "101\nJaneDoe\n1",
    "sampleOutput": "Student ID: 101\nName: JaneDoe\nStatus: GRADUATED\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Real World Problem",
    "title": "Product Inventory: Using Structures and Dynamic Allocation",
    "description": "Build a simple product inventory management system using structures and dynamic memory allocation. Your program should: \n1. Define a `struct Product` with members: `int id`, `char name[50]`, `float price`, `int quantity`. \n2. Read an integer `num_products` from the user. \n3. Dynamically allocate an array of `struct Product` to hold `num_products` products. \n4. Read `num_products` sets of product data (ID, name (single word), price, quantity) from the user and populate the dynamic array. \n5. Iterate through the array and print the details of all products, formatted to two decimal places for price. \n6. After printing, `free` the dynamically allocated memory. \nThis problem consolidates structures with dynamic memory allocation to manage a variable number of complex data records, a common task in real-world applications. The Flutter app will provide the number of products and their details.",
    "constraints": "`num_products` between 1 and 5. Product ID positive int, Name max 49 chars, Price positive float, Quantity positive int. Output price to two decimal places. Ensure proper memory allocation and deallocation.",
    "sampleInput": "2\n101 Keyboard 45.99 15\n102 Mouse 19.50 20",
    "sampleOutput": "Product Inventory:\nID: 101, Name: Keyboard, Price: 45.99, Quantity: 15\nID: 102, Name: Mouse, Price: 19.50, Quantity: 20\nMemory freed.\n"
  },
  {
    "topic": "Structures and Unions",
    "level": "Real World Problem",
    "title": "Geometric Shapes: Area Calculator with Union and Tagged Struct",
    "description": "This problem demonstrates a powerful pattern for handling different but related data types using a **union within a structure (a 'tagged union' or 'variant record')**. This is often used when an entity can be one of several types. Your program should: \n\n1. Define an `enum ShapeType` with values `CIRCLE`, `RECTANGLE`. \n2. Define a `union ShapeData` that can hold either a `struct Circle` (with `double radius`) or a `struct Rectangle` (with `double length`, `double width`). \n3. Define a main `struct Shape` that contains: \n    * An `enum ShapeType type;` \n    * A `union ShapeData data;` \n\n4. In `main`, prompt the user to choose a shape ('C' for Circle, 'R' for Rectangle). \n5. Based on the choice, read the appropriate dimensions (radius for circle, length/width for rectangle). \n6. Create a `struct Shape` variable, set its `type` member, and store the dimensions in the `data` union. \n7. Use a `switch` statement on `shape.type` to calculate and print the area of the selected shape, formatted to two decimal places. \n\n**Tricky Part:** Correctly accessing the union members based on the `type` tag and performing the specific area calculation. This pattern is crucial for flexible data representation. The Flutter app will provide the shape type and its dimensions.",
    "constraints": "Shape type input 'C' or 'R'. Dimensions positive doubles between 0.1 and 100.0. Output area to two decimal places. Implement area calculations for both shapes.",
    "sampleInput": "C\n5.0",
    "sampleOutput": "Shape: Circle\nRadius: 5.00\nArea: 78.54\n"
  }
]

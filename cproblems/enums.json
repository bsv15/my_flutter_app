[
  {
    "topic": "Unions and Enums",
    "level": "Easy",
    "title": "Basic Union Declaration and Usage",
    "description": "Write a C program that defines a `union` named `Data`. This union should be able to hold either an integer (`int_val`) or a floating-point number (`float_val`) at any given time. In your `main` function, declare a variable of type `union Data`. First, assign an integer value (e.g., 10) to its `int_val` member and print it. Then, immediately assign a floating-point value (e.g., 25.50) to its `float_val` member and print it. Observe and understand how assigning a value to one member of a union **overwrites** the data stored in the previous member, as they share the same memory location. This problem introduces the fundamental concept of unions.",
    "constraints": "The union `Data` must have `int_val` and `float_val` members. Specific values are for demonstration.",
    "sampleInput": "None",
    "sampleOutput": "Assigned integer value: 10\nAssigned floating-point value: 25.50\n(Note: If you try to print `int_val` after assigning to `float_val`, it will show garbage or corrupted data, which is part of the concept.)",
    "explanation": "The output shows the last assigned value, `25.50`. This happens because `union Data` allocates memory only large enough to hold its *largest* member (e.g., `float_val`).\n1. When `data.int_val = 10;` is executed, the memory location shared by the union is filled with the bit pattern representing `10` as an integer.\n2. When `data.float_val = 25.50;` is executed *immediately after*, the **same shared memory location is completely overwritten** with the bit pattern representing `25.50` as a floating-point number.\nIf you were to then try and print `data.int_val` again, it would interpret the floating-point bit pattern as an integer, likely resulting in **garbage or corrupted data**. This output demonstrates the core concept of **memory sharing in unions**, where only one member can actively hold a valid value at any given time."
  },
  {
    "topic": "Unions and Enums",
    "level": "Easy",
    "title": "Basic Enum Definition and Usage",
    "description": "Create a C program that defines an enumeration (`enum`) named `DaysOfWeek`. It should list the days of the week starting from Monday (MON) to Sunday (SUN). By default, enums assign integer values starting from 0. Declare a variable of type `enum DaysOfWeek` and assign it the value `WED`. Print the integer value associated with `WED` to the console. This problem introduces the basic syntax and default integer assignment of enums.",
    "constraints": "The `enum DaysOfWeek` must be defined with standard days of the week. The variable should be assigned `WED`.",
    "sampleInput": "None",
    "sampleOutput": "Wednesday corresponds to day number: 2",
    "explanation": "The output `Wednesday corresponds to day number: 2` occurs because in C, **enums by default assign integer values starting from 0** to their members, in the order they are declared. So, if `MON` is the first member, it gets 0, `TUE` gets 1, and `WED` (Wednesday) gets 2. When `enum DaysOfWeek today = WED;` is declared and `today` is printed as an integer using `%d`, its underlying integer value of `2` is displayed. This illustrates the basic concept of **enumerated types** and their default integer representations, improving code readability over raw integer constants."
  },
  {
    "topic": "Unions and Enums",
    "level": "Medium",
    "title": "Enum with Custom Starting and Explicit Values",
    "description": "Write a C program that defines an enumeration `enum Level`. Assign custom integer values to its members: `LOW = 1`, `MEDIUM = 5`, and `HIGH = 10`. Declare a variable of type `enum Level` and assign it the value `HIGH`. Print the integer value of `HIGH`. Also, print the integer value of `LOW` to confirm their custom assignments. This problem demonstrates how to explicitly assign specific integer values to enum constants, overriding their default behavior.",
    "constraints": "The enum `Level` must have the specified custom integer values.",
    "sampleInput": "None",
    "sampleOutput": "The value for HIGH is: 10\nThe value for LOW is: 1",
    "explanation": "The output `The value for HIGH is: 10` and `The value for LOW is: 1` confirms that the program successfully used **explicit integer assignments** within the `enum Level` definition (e.g., `LOW = 1`, `MEDIUM = 5`, `HIGH = 10`). When `HIGH` is assigned to an `enum Level` variable and printed as an integer, its defined value `10` is displayed. Similarly for `LOW`. This demonstrates how to **override the default sequential integer assignment** in enums, allowing specific, non-sequential values to be associated with enum constants for better control and clarity."
  },
  {
    "topic": "Unions and Enums",
    "level": "Medium",
    "title": "Determining Union Size with `sizeof`",
    "description": "Define a union named `MixedType` with three members of different data types: `char c;`, `int i;`, and `float f;`. Use the `sizeof` operator to determine and print the total size (in bytes) of this `union MixedType`. In your solution, explain *why* the size of the union is equal to the size of its largest member, rather than the sum of all its members' sizes. This problem helps solidify the understanding of memory allocation for unions.",
    "constraints": "The union `MixedType` must contain the specified `char`, `int`, and `float` members.",
    "sampleInput": "None",
    "sampleOutput": "Size of MixedType union: [e.g., 4 or 8, depending on system architecture and compiler's int/float sizes]\n(User's explanation of union memory sharing principle is expected.)",
    "explanation": "The `sampleOutput` indicates a size (e.g., `4` or `8` bytes, depending on the system's `int` and `float` sizes). This result from `sizeof(union MixedType)` is equal to the size of its **largest member**, not the sum of all members. For example, if `char` is 1 byte, `int` is 4 bytes, and `float` is 4 bytes, the union's size will be 4 bytes (or possibly 8 if padding for alignment makes `float` effectively 8 bytes on some systems). This is because **all members of a union share the same starting memory location**. The union's total size is just large enough to accommodate its largest member, as they all occupy the same memory region, demonstrating memory optimization but also the **exclusive nature** of union member usage."
  },
  {
    "topic": "Unions and Enums",
    "level": "Medium",
    "title": "Simple State Machine using Enum and Switch",
    "description": "Develop a C program that simulates a device with different states using an `enum`. Define an enumeration `enum DeviceState {OFF, ON, SLEEP};`. In your `main` function, initialize a variable of type `enum DeviceState` to `OFF`. Use a `switch` statement to print a message indicating the current state (e.g., 'Device is OFF'). Then, sequentially change the state to `ON` and then to `SLEEP`, printing a corresponding message for each new state using the `switch` statement again. This problem demonstrates how enums can make code more readable and manageable when dealing with distinct states.",
    "constraints": "The `enum DeviceState` must have `OFF`, `ON`, and `SLEEP` states. The state transitions and messages are fixed.",
    "sampleInput": "None",
    "sampleOutput": "Current Device State: OFF\nSwitching device state to ON...\nCurrent Device State: ON\nSwitching device state to SLEEP...\nCurrent Device State: SLEEP",
    "explanation": "The output precisely traces the state changes of the `DeviceState` variable. Initially, the state is set to `OFF`. When the `switch` statement evaluates `OFF`, the `case OFF:` block executes, printing 'Current Device State: OFF'. Subsequently, the program changes the state to `ON` and then `SLEEP`. Each time the `switch` statement re-evaluates the `DeviceState` variable, it correctly branches to the corresponding `case` label, printing the relevant message. This problem beautifully illustrates how **enums improve code readability and maintainability** by providing meaningful names for discrete states, and how a **`switch` statement** can effectively control program flow based on those states, forming a basic **state machine**."
  },
  {
    "topic": "Unions and Enums",
    "level": "Hard",
    "title": "Union with a Structure Member and Data Corruption",
    "description": "Define a structure `struct Coords` with integer members `x` and `y`. Then, define a union `union ShapeData` that contains two members: `float radius;` and `struct Coords rect_coords;`. In your `main` function:\n1. Declare a variable of type `union ShapeData`.\n2. Assign a value (e.g., 5.5) to its `radius` member and print it.\n3. Immediately after, assign values (e.g., `x = 10`, `y = 20`) to its `rect_coords` member and print them.\n4. Finally, attempt to print the `radius` member again *after* the `rect_coords` assignment. Observe and explain why the value of `radius` is now likely garbage or corrupted, demonstrating the memory-sharing characteristic of unions. This problem highlights a critical aspect of union misuse if not properly tracked.",
    "constraints": "The structures and unions are defined as specified. Values are for demonstration purposes.",
    "sampleInput": "None",
    "sampleOutput": "Assigned radius: 5.50\nAssigned rectangle coordinates: (10, 20)\nRadius after coordinate assignment: [Garbage value, e.g., 0.00 or a very small/large number]\n(User's explanation detailing shared memory and potential data corruption in unions is expected.)",
    "explanation": "The output `Radius after coordinate assignment: [Garbage value]` (e.g., `0.00` or a very large/small number) is crucial.\n1. Initially, `union_var.radius = 5.5;` writes the bit pattern for `5.5` into the shared memory space of `union ShapeData`.\n2. When `union_var.rect_coords.x = 10;` and `union_var.rect_coords.y = 20;` are executed, the memory occupied by `radius` is **completely overwritten** with the bit patterns for `10` and `20` as integers (potentially aligned based on the `struct Coords` layout). The `struct Coords` is the larger member of the union, so it determines the union's overall size.\n3. Attempting to print `union_var.radius` *after* this will cause the program to interpret the bits now representing `10` and `20` (as integers) as a `float`. This interpretation is meaningless (undefined behavior) and almost certainly results in a **corrupted or garbage value**. This demonstrates the critical importance of understanding that **union members share the *exact same* memory location**, and writing to one member invalidates the data in all others, a common source of bugs if not managed carefully."
  },
  {
    "topic": "Unions and Enums",
    "level": "Hard",
    "title": "Enum for Function Return Error Codes",
    "description": "Write a C program that defines an enumeration `enum ErrorCode` with constants for various operation outcomes: `SUCCESS = 0`, `FILE_NOT_FOUND = 1`, `PERMISSION_DENIED = 2`, `NETWORK_ERROR = 3`. Implement a function `enum ErrorCode performOperation(int operation_id)` that simulates a process. Inside this function, based on the `operation_id` input (0 for success, 1 for file error, etc.), return the corresponding `ErrorCode`. In your `main` function, prompt the user for an `operation_id`. Call `performOperation` and use a `switch` statement on the returned `ErrorCode` to print a user-friendly message for each specific error type, or 'Operation Successful' for `SUCCESS`. This problem showcases enums for clear, readable error handling in functions.",
    "constraints": "`operation_id` will be an integer between 0 and 3, mapping directly to `ErrorCode` values.",
    "sampleInput": "Enter operation ID (0=Success, 1=File Error, 2=Perm Error, 3=Net Error): 1",
    "sampleOutput": "Operation result: Error - File Not Found!",
    "explanation": "When the user enters `1` for the `operation_id`:\n1. The `performOperation(1)` function is called. Inside this function, a `switch` statement (or `if-else if`) matches the `operation_id` of `1` and returns the `enum ErrorCode` value `FILE_NOT_FOUND`.\n2. Back in `main`, the `switch` statement evaluating the returned `ErrorCode` receives `FILE_NOT_FOUND`.\n3. It then matches the `case FILE_NOT_FOUND:` block, which prints the user-friendly message 'Operation result: Error - File Not Found!'.\nThis clearly demonstrates how **enums provide a readable and type-safe way to represent distinct error codes or status conditions** returned by functions. Combining them with a `switch` statement allows for robust and maintainable **error handling** logic, making code more self-documenting than using raw integer constants."
  },
  {
    "topic": "Unions and Enums",
    "level": "Tricky",
    "title": "Tagged Union with Anonymous Union and Enum",
    "description": "Design a C program to create a **tagged union** structure, which allows a single variable to hold different types of data safely, by explicitly 'tagging' what type of data is currently active. Define a structure named `GenericValue`. This structure should contain two members:\n1. An `enum Type {INT_TYPE, FLOAT_TYPE, STRING_TYPE};` to indicate the currently stored type.\n2. An **anonymous union** with members: `int i_val;`, `float f_val;`, and `char s_val[50];`.\nWrite code in `main` to:\n1. Create a `GenericValue` variable, set its `Type` to `INT_TYPE`, and assign an integer value (e.g., 123) to `i_val`. Then, print both its type and value.\n2. Create another `GenericValue` variable, set its `Type` to `STRING_TYPE`, and assign a string value (e.g., \"Hello C\") to `s_val`. Then, print both its type and value.\nExplain in your solution why anonymous unions are particularly useful here and how the `Type` enum 'tags' the currently active member, allowing for safer access. This problem demonstrates an advanced pattern for flexible data representation.",
    "constraints": "String max 49 chars + null terminator. Other values as typical for their types. The anonymous union must be used.",
    "sampleInput": "None",
    "sampleOutput": "Value 1: Type INT, Data: 123\nValue 2: Type STRING, Data: Hello C\n(User's comprehensive explanation of tagged unions, anonymous unions, and type safety is expected.)",
    "explanation": "The output `Value 1: Type INT, Data: 123` and `Value 2: Type STRING, Data: Hello C` confirms the successful storage and retrieval of different data types within a single `GenericValue` variable. This is achieved by combining an **enum `Type` (the 'tag')** with an **anonymous union**:\n1. For the first value, `value1.type` is set to `INT_TYPE`, and `value1.i_val = 123;` is assigned. When printing, the program checks `value1.type` and, seeing `INT_TYPE`, correctly accesses and prints `value1.i_val`.\n2. For the second value, `value2.type` is set to `STRING_TYPE`, and `strcpy(value2.s_val, \"Hello C\");` is used. Printing then checks `value2.type` and accesses `value2.s_val`.\nAn **anonymous union** is useful here because its members (`i_val`, `f_val`, `s_val`) are directly accessible from the `GenericValue` struct without needing an extra nested union member name (e.g., `value.data.i_val` vs. `value.i_val`). The `Type` enum acts as a **'tag' or discriminant**, ensuring that the program knows *which* member of the shared memory (the union) is currently valid and should be accessed, preventing the data corruption that typically occurs with untagged unions. This pattern provides a flexible, **polymorphic-like data structure** while maintaining **type safety** at runtime through explicit checks."
  },
  {
    "topic": "Unions and Enums",
    "level": "Real World Problem",
    "title": "Vehicle Data using a Polymorphic-like Union",
    "description": "Imagine building a system to manage a fleet of vehicles where different vehicle types have distinct attributes. Define a `struct Vehicle` that contains:\n1. An `enum VehicleType {CAR, MOTORCYCLE};` to specify the type of vehicle.\n2. A `union VehicleDetails` to hold type-specific data:\n    - If `type` is `CAR`, `VehicleDetails` should have an `int num_doors;`.\n    - If `type` is `MOTORCYCLE`, `VehicleDetails` should have an `int engine_cc;`.\nImplement a function `void printVehicleDetails(struct Vehicle v)` that takes a `Vehicle` structure as input. Inside this function, use a `switch` statement on the `VehicleType` enum to correctly access and print the appropriate union member. In `main`, create two `Vehicle` variables, one for a `CAR` (e.g., 4 doors) and one for a `MOTORCYCLE` (e.g., 250cc), populate their details, and then use `printVehicleDetails` to display them. This problem showcases unions and enums for creating flexible, 'polymorphic-like' data structures in C.",
    "constraints": "Num doors: 2 or 4. Engine CC: 50-1000. Vehicle types are only CAR or MOTORCYCLE.",
    "sampleInput": "None (data hardcoded for two vehicles)",
    "sampleOutput": "Vehicle Details:\nType: Car, Doors: 4\nType: Motorcycle, Engine CC: 250",
    "explanation": "The output clearly distinguishes details for a 'Car' and a 'Motorcycle', demonstrating how the program correctly handles different vehicle types using a single `Vehicle` structure.\n1. For the `CAR` example: The `VehicleType` enum member is set to `CAR`, and the `num_doors` member of the `VehicleDetails` union is assigned (e.g., `4`).\n2. For the `MOTORCYCLE` example: The `VehicleType` is set to `MOTORCYCLE`, and the `engine_cc` member of the *same* `VehicleDetails` union is assigned (e.g., `250`).\n3. The `printVehicleDetails` function is key: it takes a `Vehicle` struct and uses a **`switch` statement on the `VehicleType` enum**. If the type is `CAR`, it accesses `v.details.num_doors`. If it's `MOTORCYCLE`, it accesses `v.details.engine_cc`. This selective access is safe because the `enum` acts as a **tag**, indicating which member of the **union** is currently valid. This design pattern mimics **polymorphism** in C, allowing a single structure to represent various data types based on a discriminant, making it highly flexible for real-world scenarios like managing diverse inventory."
  }
]

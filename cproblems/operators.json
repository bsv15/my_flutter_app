[
  {
    "topic": "Operators and Expressions",
    "level": "Easy",
    "title": "Basic Arithmetic Operations",
    "description": "Write a C program that takes two integers as input from the user. Calculate and print their sum, difference, product, and the result of integer division, each on a new line and clearly labeled.",
    "constraints": "Input integers will be between -1000 and 1000. The second number for division will not be zero.",
    "sampleInput": "20\n4",
    "sampleOutput": "Sum: 24\nDifference: 16\nProduct: 80\nDivision: 5"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Easy",
    "title": "Modulo Operator Basic",
    "description": "Write a C program that takes a positive integer as input. Print the remainder when this number is divided by 5. This will help understand the basic usage of the modulo operator.",
    "constraints": "Input integer will be between 1 and 1000.",
    "sampleInput": "17",
    "sampleOutput": "Remainder: 2"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Medium",
    "title": "Celsius to Fahrenheit Conversion",
    "description": "Create a C program that reads a temperature in Celsius (a floating-point number) from the user. Convert it to Fahrenheit using the formula: `F = (C * 9/5) + 32`. Print the Fahrenheit temperature formatted to two decimal places.",
    "constraints": "Input temperature will be between -50.0 and 100.0 Celsius.",
    "sampleInput": "25.0",
    "sampleOutput": "Temperature in Fahrenheit: 77.00"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Medium",
    "title": "Compound Assignment Application",
    "description": "Initialize an integer variable `wallet` to 500. Use compound assignment operators to first add 100, then subtract 50, then multiply by 2, and finally divide by 4. Print the `wallet`'s value after each operation.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "Initial wallet: 500\nAfter adding 100: 600\nAfter subtracting 50: 550\nAfter multiplying by 2: 1100\nAfter dividing by 4: 275"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Medium",
    "title": "Logical AND and OR Decisions",
    "description": "Write a C program that reads a student's `marks` (integer, out of 100) and their `attendance_percentage` (integer, out of 100). Print 'Eligible for Exam' if `marks` are greater than or equal to 50 AND `attendance_percentage` is greater than or equal to 75. Otherwise, print 'Not Eligible'.",
    "constraints": "Marks: 0-100. Attendance: 0-100.",
    "sampleInput": "70\n80",
    "sampleOutput": "Eligible for Exam"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Hard",
    "title": "Bitwise NOT (Complement) and Shifting",
    "description": "Write a C program that reads a positive integer `num`. First, calculate and print its bitwise NOT (`~num`). Then, left shift `num` by 2 bits (`num <<= 2`) and print the new value. Finally, right shift the *original* `num` (before left shift) by 1 bit (`num >> 1`) and print its value. Explain how these operations affect the binary representation.",
    "constraints": "Input integer will be between 1 and 64 (to keep bitwise results simple).",
    "sampleInput": "12",
    "sampleOutput": "Bitwise NOT of 12: -13 (or 4294967283 if unsigned)\n12 shifted left by 2: 48\n12 shifted right by 1: 6"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Hard",
    "title": "Complex Expression Evaluation",
    "description": "Given `int p = 5, q = 3, r = 10;`, evaluate the expression: `result = (p++ * q) + (--r / b) - (a % c);` where `a = 7, b = 2, c = 4;`. Print the final `result` and the updated values of `p` and `r`. Pay close attention to operator precedence and side effects.",
    "constraints": "None (values are fixed).",
    "sampleInput": "None",
    "sampleOutput": "Result: 23\np: 6\nr: 9"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Tricky",
    "title": "Order of Evaluation with Postfix",
    "description": "Consider `int x = 5; int y = x++ + ++x;`. Without running the code, predict the final values of `x` and `y`. Then, write a C program to confirm your prediction and print the values. Explain why the result might be surprising due to the order of evaluation and side effects.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "x: 7\ny: 12 (Explanation needed from user in their solution)"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Tricky",
    "title": "Integer Division Quirks",
    "description": "Write a C program that takes two integers, `numerator` and `denominator`, as input. Print the result of `numerator / denominator` and `(float)numerator / denominator`. Explain the difference in output.",
    "constraints": "Numerator between 1 and 100. Denominator between 1 and 10.",
    "sampleInput": "7\n2",
    "sampleOutput": "Integer division: 3\nFloating-point division: 3.50"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Real World Problem",
    "title": "Simple Product Discount Calculator",
    "description": "You're building a checkout system. A user inputs the `original_price` (float) of an item and a `discount_percentage` (integer, e.g., 10 for 10%). Calculate the final price after applying the discount. Print both the discount amount and the final price, formatted to two decimal places. Use appropriate type casting for calculations involving percentages.",
    "constraints": "Original Price: 1.00 to 1000.00. Discount Percentage: 0 to 90.",
    "sampleInput": "120.00\n25",
    "sampleOutput": "Discount Amount: 30.00\nFinal Price: 90.00"
  }
]

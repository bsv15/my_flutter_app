[
  {
    "topic": "Arrays",
    "level": "Easy",
    "title": "Initialize and Print a Static Array",
    "description": "Declare an integer array named `numbers` of a fixed size of 5. Initialize this array directly during its declaration with the values: 10, 20, 30, 40, 50. After initialization, use a `for` loop to iterate through each element of the array. Print each element on a new line.",
    "constraints": "Array size is fixed at 5. Elements are fixed as specified. Use a `for` loop to iterate and print.",
    "sampleInput": "None",
    "sampleOutput": "Array element at index 0: 10\nArray element at index 1: 20\nArray element at index 2: 30\nArray element at index 3: 40\nArray element at index 4: 50",
    "explanation": "The output clearly shows each array element along with its corresponding **zero-based index**. This confirms that the array was correctly initialized with the given values and that the `for` loop successfully iterated through each element, printing them in order from index 0 to 4. This output is straightforward and directly reflects the array's contents."
  },
  {
    "topic": "Arrays",
    "level": "Easy",
    "title": "Accessing Specific Array Elements",
    "description": "Write a C program that declares a character array (which is a C-style string) named `programName` and initialize it with the value \"C-Program\". Your task is to access and print specific characters from this array using their **index**. Print the character at index 0 (the first character), the character at index 2 (the third character), and finally, the last character of the string. This problem reinforces the concept of zero-based indexing in arrays.",
    "constraints": "The string 'C-Program' has a fixed length. Correctly identify the index for the last character (remembering null termination).",
    "sampleInput": "None",
    "sampleOutput": "First character: C\nThird character: P\nLast character: m",
    "explanation": "This output confirms your understanding of **zero-based indexing** in C arrays. 'C' is indeed at index 0 and 'P' at index 2. For the string \"C-Program\" (which has 9 visible characters), the last character 'm' is correctly accessed at index 8. The output directly validates your ability to pinpoint and retrieve individual characters using their numerical positions."
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Calculate Sum of Array Elements from User Input",
    "description": "Write a C program that prompts the user to enter 5 integer values. Store these 5 integers into an array. After all inputs are received, calculate the sum of all the elements stored in the array using a loop. Finally, print the computed sum to the console. This problem combines user input, array population, and iterative summation.",
    "constraints": "Array size is fixed at 5. Input integers will be between -100 and 100. Use a loop for input and another loop for summation.",
    "sampleInput": "10\n20\n30\n40\n50",
    "sampleOutput": "Enter 5 integers:\n10\n20\n30\n40\n50\nThe sum of all array elements is: 150",
    "explanation": "The output first shows the program correctly prompting for and receiving each of the five integer inputs. The final line, 'The sum of all array elements is: 150', confirms that your program successfully read all numbers into the array and then correctly computed their **cumulative sum** (10+20+30+40+50 = 150), demonstrating effective array population and processing."
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Find Maximum Element in an Array",
    "description": "Develop a C program that reads 5 integer values from the user and stores them in an array. Once the array is populated, your program should traverse the array to find the single largest (maximum) element among them. Print the identified maximum element to the console. This problem demonstrates linear search for finding extreme values in an array.",
    "constraints": "Array size is fixed at 5. Input integers will be between -1000 and 1000. Use a loop to find the maximum.",
    "sampleInput": "45\n12\n78\n33\n90",
    "sampleOutput": "Enter 5 integers:\n45\n12\n78\n33\n90\nThe maximum element in the array is: 90",
    "explanation": "The output 'The maximum element in the array is: 90' directly verifies that your program correctly identified the **largest value** (90) among the set of input numbers. This demonstrates the effectiveness of a **linear search** approach, where each element is compared against a running 'maximum' variable, updating it whenever a larger value is found during the array traversal."
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Reverse Array Elements In-Place",
    "description": "Write a C program that reads 5 integers into an array from the user. After reading, modify the array **in-place** so that its elements are in reverse order. This means the first element becomes the last, the second becomes the second-to-last, and so on, without using an additional temporary array of the same size. Finally, print the elements of the reversed array, separated by spaces, on a single line.",
    "constraints": "Array size is fixed at 5. Input integers will be between 1 and 100. Reverse in-place (no auxiliary array). Print space-separated on one line.",
    "sampleInput": "1\n2\n3\n4\n5",
    "sampleOutput": "Original array: 1 2 3 4 5\nReversed array: 5 4 3 2 1",
    "explanation": "The output clearly shows both the original and the final reversed state of the array. The 'Reversed array: 5 4 3 2 1' output confirms that the elements were successfully swapped to achieve **reverse order without using extra memory**. This demonstrates an efficient **in-place reversal algorithm**, typically achieved by iteratively swapping elements from opposite ends of the array until the middle is reached."
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Search for an Element in an Array",
    "description": "Create a C program that first prompts the user to enter 10 integer values to populate an array. After the array is filled, ask the user to enter a single `search_key` integer. Your program should then search for this `search_key` within the array. If the `search_key` is found, print 'Element found at index: [index]' (where `[index]` is the first position it appears). If the `search_key` is not found anywhere in the array, print 'Element not found.'.",
    "constraints": "Array size is 10. All integers (array elements and search key) will be between 0 and 100. Implement a **linear search**.",
    "sampleInput": "Array elements: 10 20 30 40 50 60 70 80 90 100\nSearch key: 70",
    "sampleOutput": "Element found at index: 6",
    "explanation": "The output 'Element found at index: 6' validates that your program successfully located the `search_key` '70' at the correct **zero-based index** (index 6 corresponds to the 7th element). This demonstrates the functionality of a **linear search algorithm**, where each element in the array is checked sequentially until a match is found or the end of the array is reached, proving the search logic works as expected."
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Count Frequency of Each Element in an Array",
    "description": "Write a C program that reads 10 integers into an array from the user. Assume that these input integers will be within the range of 1 to 10 (inclusive). Your task is to count how many times each distinct number (from 1 to 10) appears in the array. Finally, print the frequency of each distinct element found. For example, if '5' appears 3 times, print '5 appears 3 times'. This problem can be efficiently solved using an auxiliary 'frequency array' or 'count array'.",
    "constraints": "Array size is 10. Input elements are guaranteed to be integers between 1 and 10. Use an auxiliary array for counting.",
    "sampleInput": "1 2 2 3 1 4 5 3 2 1",
    "sampleOutput": "Frequency of elements:\n1 appears 3 times\n2 appears 3 times\n3 appears 2 times\n4 appears 1 time\n5 appears 1 time\n(Other numbers 6-10, if not present, don't need to be printed or can be printed as '0 times')",
    "explanation": "The output, like '1 appears 3 times' and '2 appears 3 times', confirms that your program accurately tallied the occurrences of each distinct number within the input array. This demonstrates the effective use of a **frequency array** (or count array), where the index of this auxiliary array corresponds to the number itself, and its value stores the count. This is a common and efficient method for determining element frequencies within a defined range."
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Matrix Addition (2x2 Two-Dimensional Arrays)",
    "description": "Write a C program that performs matrix addition for two 2x2 integer matrices. Prompt the user to enter the elements for the first matrix (Matrix A) row by row, then do the same for the second matrix (Matrix B). Store these elements in two separate 2D arrays. Calculate their sum (Matrix C = A + B), where $C_{ij} = A_{ij} + B_{ij}$. Finally, print the resulting sum matrix (Matrix C) in a clear 2x2 format. This problem introduces handling two-dimensional arrays.",
    "constraints": "Both matrices are fixed 2x2. Matrix elements will be integers between -100 and 100. Use **nested loops** for input and calculation.",
    "sampleInput": "Enter elements for Matrix A (2x2):\n1 2\n3 4\nEnter elements for Matrix B (2x2):\n5 6\n7 8",
    "sampleOutput": "Resultant Matrix (A + B):\n6 8\n10 12",
    "explanation": "The output displays the resulting 2x2 matrix, with the first row '6 8' and the second '10 12'. This visual representation confirms that your program correctly performed **element-wise addition** of the two input matrices (e.g., $1+5=6$, $2+6=8$, etc.). This effectively demonstrates the manipulation and output of data stored in **two-dimensional arrays** using **nested loops**."
  },
  {
    "topic": "Arrays",
    "level": "Tricky",
    "title": "Demonstrating Array Out-of-Bounds Access (Undefined Behavior)",
    "description": "Write a C program that declares a small integer array, for example, `int arr[5];`. Then, deliberately attempt to write a value to an index that is **outside the bounds** of this array (e.g., `arr[5] = 100;` or `arr[10] = 200;`). Compile and run this program. Describe in your solution what typically happens when you execute such code (e.g., a warning, a runtime error, a crash like a 'Segmentation Fault'). Explain *why* this occurs in C, emphasizing the language's lack of automatic **bounds checking** for arrays and the potential for **undefined behavior** or **buffer overflow vulnerabilities**.",
    "constraints": "The array size is small and fixed. The out-of-bounds access should be clearly demonstrable. The explanation should focus on C's memory model.",
    "sampleInput": "None (the program's execution behavior is the key)",
    "sampleOutput": "The program will likely terminate abnormally with a runtime error such as 'Segmentation fault' or 'Bus error'. (Your explanation in comments or a concluding print statement should elaborate on C's memory model, array bounds, and the concept of undefined behavior.)",
    "explanation": "The output of a crash (like 'Segmentation fault') is a direct consequence of your program attempting to access or modify memory locations it doesn't own or isn't permitted to. This happens because C arrays **do not perform automatic bounds checking** at runtime. When you try to access `arr[5]` for an `arr[5]` array, you are trying to write beyond its allocated memory. This leads to **undefined behavior**, which can manifest as a crash, incorrect program execution, or data corruption elsewhere in memory, highlighting a critical aspect of manual memory management in C."
  },
  {
    "topic": "Arrays",
    "level": "Real World Problem",
    "title": "Student Exam Score Analysis (2D Array)",
    "description": "Imagine you are developing a system to analyze student performance. You have 5 students, and each student has scores for 3 subjects. This data can be naturally represented using a 2D array, where rows represent students and columns represent subjects (e.g., `int scores[5][3];`). Write a C program to:\n1. Prompt the user to enter all 15 scores (integers between 0 and 100) for all students and subjects.\n2. Calculate and print the `total score` for each individual student.\n3. Calculate and print the `average score` for each subject across all students, formatted to two decimal places.",
    "constraints": "Number of students is 5, number of subjects is 3. Scores are integers between 0 and 100. Assume valid numerical input. Use **nested loops** for input and calculations.",
    "sampleInput": "Enter scores for Student 1 (Sub1 Sub2 Sub3): 80 90 70\nEnter scores for Student 2 (Sub1 Sub2 Sub3): 60 70 80\nEnter scores for Student 3 (Sub1 Sub2 Sub3): 90 85 95\nEnter scores for Student 4 (Sub1 Sub2 Sub3): 75 65 85\nEnter scores for Student 5 (Sub1 Sub2 Sub3): 50 60 70",
    "sampleOutput": "--- Student Totals ---\nStudent 1 Total: 240\nStudent 2 Total: 210\nStudent 3 Total: 270\nStudent 4 Total: 225\nStudent 5 Total: 180\n\n--- Subject Averages ---\nSubject 1 Average: 71.00\nSubject 2 Average: 74.00\nSubject 3 Average: 78.00",
    "explanation": "The output provides a clear, formatted summary of student and subject performance, resembling a simplified report card. The 'Student Totals' section verifies that your program correctly summed the scores for each student (e.g., Student 1: 80+90+70 = 240). The 'Subject Averages' confirm accurate calculation of averages across all students for each subject (e.g., Subject 1: (80+60+90+75+50)/5 = 71.00). This demonstrates the practical application of **2D arrays** and **nested loops** for organizing, inputting, and analyzing tabular data in a real-world scenario."
  }
]

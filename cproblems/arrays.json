[
  {
    "topic": "Arrays",
    "level": "Easy",
    "title": "Initialize and Print a Static Array",
    "description": "Declare an integer array named `numbers` of a fixed size of 5. Initialize this array directly during its declaration with the values: 10, 20, 30, 40, 50. After initialization, use a `for` loop to iterate through each element of the array. Print each element on a new line.",
    "constraints": "Array size is fixed at 5. Elements are fixed as specified. Use a `for` loop to iterate and print.",
    "sampleInput": "None",
    "sampleOutput": "Array element at index 0: 10\nArray element at index 1: 20\nArray element at index 2: 30\nArray element at index 3: 40\nArray element at index 4: 50",
    "explanation": "The output shows a sequential printout of each array element, corresponding to its zero-based index. This occurs because the `for` loop iterates from `index = 0` to `index = 4` (the fixed size of 5 minus 1). In each iteration, `printf()` is used to access `numbers[index]` and print its value. This explicitly demonstrates successful **array declaration with direct initialization** and how a **`for` loop** is used to systematically **traverse and access each element** of an array in C."
  },
  {
    "topic": "Arrays",
    "level": "Easy",
    "title": "Accessing Specific Array Elements",
    "description": "Write a C program that declares a character array (which is a C-style string) named `programName` and initialize it with the value \"C-Program\". Your task is to access and print specific characters from this array using their **index**. Print the character at index 0 (the first character), the character at index 2 (the third character), and finally, the last character of the string. This problem reinforces the concept of zero-based indexing in arrays.",
    "constraints": "The string 'C-Program' has a fixed length. Correctly identify the index for the last character (remembering null termination).",
    "sampleInput": "None",
    "sampleOutput": "First character: C\nThird character: P\nLast character: m",
    "explanation": "The output 'First character: C' is achieved by accessing `programName[0]`, as arrays in C are **zero-indexed**. 'Third character: P' comes from `programName[2]`. For the 'Last character: m', the program calculates the length of \"C-Program\" (which is 9 characters excluding the null terminator), so the last character is at `programName[8]`. This demonstrates the fundamental concept of **direct element access by index** in C arrays/strings."
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Calculate Sum of Array Elements from User Input",
    "description": "Write a C program that prompts the user to enter 5 integer values. Store these 5 integers into an array. After all inputs are received, calculate the sum of all the elements stored in the array using a loop. Finally, print the computed sum to the console. This problem combines user input, array population, and iterative summation.",
    "constraints": "Array size is fixed at 5. Input integers will be between -100 and 100. Use a loop for input and another loop for summation.",
    "sampleInput": "10\n20\n30\n40\n50",
    "sampleOutput": "Enter 5 integers:\n10\n20\n30\n40\n50\nThe sum of all array elements is: 150",
    "explanation": "The output `The sum of all array elements is: 150` is obtained because the program first uses a `for` loop and `scanf()` to sequentially read the 5 input integers (10, 20, 30, 40, 50) and store them into the array. A second `for` loop then iterates through these populated array elements, adding each value to a running `sum` variable. The final sum (10 + 20 + 30 + 40 + 50 = 150) is then printed. This illustrates **dynamic array population via user input** and **iterative summation** using a loop."
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Find Maximum Element in an Array",
    "description": "Develop a C program that reads 5 integer values from the user and stores them in an array. Once the array is populated, your program should traverse the array to find the single largest (maximum) element among them. Print the identified maximum element to the console. This problem demonstrates linear search for finding extreme values in an array.",
    "constraints": "Array size is fixed at 5. Input integers will be between -1000 and 1000. Use a loop to find the maximum.",
    "sampleInput": "45\n12\n78\n33\n90",
    "sampleOutput": "Enter 5 integers:\n45\n12\n78\n33\n90\nThe maximum element in the array is: 90",
    "explanation": "The output `The maximum element in the array is: 90` is generated after the program reads the 5 integers into the array. The program then initializes a `max` variable (e.g., with the first array element or a very small number) and iterates through the array. In each iteration, it **compares** the current array element with the `max` value. If the current element (e.g., 90) is greater than `max`, `max` is updated. After checking all elements, the final `max` value (90) is printed. This demonstrates a **linear search algorithm** to find the maximum value in an array."
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Reverse Array Elements In-Place",
    "description": "Write a C program that reads 5 integers into an array from the user. After reading, modify the array **in-place** so that its elements are in reverse order. This means the first element becomes the last, the second becomes the second-to-last, and so on, without using an additional temporary array of the same size. Finally, print the elements of the reversed array, separated by spaces, on a single line.",
    "constraints": "Array size is fixed at 5. Input integers will be between 1 and 100. Reverse in-place (no auxiliary array). Print space-separated on one line.",
    "sampleInput": "1\n2\n3\n4\n5",
    "sampleOutput": "Original array: 1 2 3 4 5\nReversed array: 5 4 3 2 1",
    "explanation": "The output `Reversed array: 5 4 3 2 1` is produced by an **in-place reversal algorithm**. The program uses two pointers (or indices), one starting from the beginning (e.g., `i=0`) and one from the end (e.g., `j=4`). It then iteratively **swaps** the elements at `arr[i]` and `arr[j]`, incrementing `i` and decrementing `j` until `i` crosses or meets `j` (for an odd-sized array). For `[1, 2, 3, 4, 5]`, (1,5) are swapped, then (2,4), leaving 3 in place, resulting in `[5, 4, 3, 2, 1]`. This is an efficient way to manipulate an array's order using minimal additional memory."
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Search for an Element in an Array",
    "description": "Create a C program that first prompts the user to enter 10 integer values to populate an array. After the array is filled, ask the user to enter a single `search_key` integer. Your program should then search for this `search_key` within the array. If the `search_key` is found, print 'Element found at index: [index]' (where `[index]` is the first position it appears). If the `search_key` is not found anywhere in the array, print 'Element not found.'.",
    "constraints": "Array size is 10. All integers (array elements and search key) will be between 0 and 100. Implement a **linear search**.",
    "sampleInput": "Array elements: 10 20 30 40 50 60 70 80 90 100\nSearch key: 70",
    "sampleOutput": "Element found at index: 6",
    "explanation": "Given the array `[10, 20, 30, 40, 50, 60, 70, 80, 90, 100]` and `search_key = 70`, the program performs a **linear search**. It iterates through the array from `index = 0`. When `index` reaches `6`, `array[6]` (which is 70) matches the `search_key`. At this point, the loop typically terminates (or a flag is set), and the program prints 'Element found at index: 6'. This output demonstrates the basic operation of **linear search**, where elements are checked one by one until a match is found."
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Count Frequency of Each Element in an Array",
    "description": "Write a C program that reads 10 integers into an array from the user. Assume that these input integers will be within the range of 1 to 10 (inclusive). Your task is to count how many times each distinct number (from 1 to 10) appears in the array. Finally, print the frequency of each distinct element found. For example, if '5' appears 3 times, print '5 appears 3 times'. This problem can be efficiently solved using an auxiliary 'frequency array' or 'count array'.",
    "constraints": "Array size is 10. Input elements are guaranteed to be integers between 1 and 10. Use an auxiliary array for counting.",
    "sampleInput": "1 2 2 3 1 4 5 3 2 1",
    "sampleOutput": "Frequency of elements:\n1 appears 3 times\n2 appears 3 times\n3 appears 2 times\n4 appears 1 time\n5 appears 1 time\n(Other numbers 6-10, if not present, don't need to be printed or can be printed as '0 times')",
    "explanation": "The output lists the frequency of each number (1, 2, 3, 4, 5) present in the input. This is achieved by using a **frequency array (or count array)**, say `counts[11]`, initialized to zeros. As the program reads each number from the input array (e.g., `1`), it increments the corresponding index in the `counts` array (e.g., `counts[1]++`). After processing all 10 input numbers, a separate loop iterates from `1` to `10` through the `counts` array. If `counts[i]` is greater than 0, it prints `i appears counts[i] times`. This demonstrates an efficient technique for **tallying occurrences** of elements within a known range."
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Matrix Addition (2x2 Two-Dimensional Arrays)",
    "description": "Write a C program that performs matrix addition for two 2x2 integer matrices. Prompt the user to enter the elements for the first matrix (Matrix A) row by row, then do the same for the second matrix (Matrix B). Store these elements in two separate 2D arrays. Calculate their sum (Matrix C = A + B), where $C_{ij} = A_{ij} + B_{ij}$. Finally, print the resulting sum matrix (Matrix C) in a clear 2x2 format. This problem introduces handling two-dimensional arrays.",
    "constraints": "Both matrices are fixed 2x2. Matrix elements will be integers between -100 and 100. Use **nested loops** for input and calculation.",
    "sampleInput": "Enter elements for Matrix A (2x2):\n1 2\n3 4\nEnter elements for Matrix B (2x2):\n5 6\n7 8",
    "sampleOutput": "Resultant Matrix (A + B):\n6 8\n10 12",
    "explanation": "The output shows the sum matrix `C` where each element $C_{ij}$ is the sum of the corresponding elements $A_{ij}$ and $B_{ij}$. For example, $C_{00} = A_{00} + B_{00} = 1 + 5 = 6$, and $C_{01} = A_{01} + B_{01} = 2 + 6 = 8$. This pattern continues for all elements. This demonstrates the use of **nested `for` loops** to iterate through the rows and columns of **two-dimensional arrays**, perform element-wise arithmetic operations, and print the results in a matrix format."
  },
  {
    "topic": "Arrays",
    "level": "Tricky",
    "title": "Demonstrating Array Out-of-Bounds Access (Undefined Behavior)",
    "description": "Write a C program that declares a small integer array, for example, `int arr[5];`. Then, deliberately attempt to write a value to an index that is **outside the bounds** of this array (e.g., `arr[5] = 100;` or `arr[10] = 200;`). Compile and run this program. Describe in your solution what typically happens when you execute such code (e.g., a warning, a runtime error, a crash like a 'Segmentation Fault'). Explain *why* this occurs in C, emphasizing the language's lack of automatic **bounds checking** for arrays and the potential for **undefined behavior** or **buffer overflow vulnerabilities**.",
    "constraints": "The array size is small and fixed. The out-of-bounds access should be clearly demonstrable.",
    "sampleInput": "None (the program's execution behavior is the key)",
    "sampleOutput": "The program will likely terminate abnormally with a runtime error such as 'Segmentation fault' or 'Bus error'. (Your explanation should elaborate on C's memory model, array bounds, and the concept of undefined behavior.)",
    "explanation": "The `sampleOutput` describes a **runtime error** like 'Segmentation fault' or 'Bus error'. This happens because when you declare `int arr[5];`, the valid indices are `0` through `4`. Attempting to access `arr[5]` or `arr[10]` means the program tries to read from or write to a memory location *outside* the block allocated for `arr`. C **does not perform automatic bounds checking**; it simply calculates the memory address based on the array's start and the index. If this calculated address falls into memory that the program doesn't own or isn't allowed to write to, the operating system intervenes and terminates the program with a segmentation fault, demonstrating **undefined behavior** and a common **buffer overflow vulnerability**."
  },
  {
    "topic": "Arrays",
    "level": "Real World Problem",
    "title": "Student Exam Score Analysis (2D Array)",
    "description": "Imagine you are developing a system to analyze student performance. You have 5 students, and each student has scores for 3 subjects. This data can be naturally represented using a 2D array, where rows represent students and columns represent subjects (e.g., `int scores[5][3];`). Write a C program to:\n1. Prompt the user to enter all 15 scores (integers between 0 and 100) for all students and subjects.\n2. Calculate and print the `total score` for each individual student.\n3. Calculate and print the `average score` for each subject across all students, formatted to two decimal places.",
    "constraints": "Number of students is 5, number of subjects is 3. Scores are integers between 0 and 100. Assume valid numerical input. Use **nested loops** for input and calculations.",
    "sampleInput": "Enter scores for Student 1 (Sub1 Sub2 Sub3): 80 90 70\nEnter scores for Student 2 (Sub1 Sub2 Sub3): 60 70 80\nEnter scores for Student 3 (Sub1 Sub2 Sub3): 90 85 95\nEnter scores for Student 4 (Sub1 Sub2 Sub3): 75 65 85\nEnter scores for Student 5 (Sub1 Sub2 Sub3): 50 60 70",
    "sampleOutput": "--- Student Totals ---\nStudent 1 Total: 240\nStudent 2 Total: 210\nStudent 3 Total: 270\nStudent 4 Total: 225\nStudent 5 Total: 180\n\n--- Subject Averages ---\nSubject 1 Average: 71.00\nSubject 2 Average: 74.00\nSubject 3 Average: 78.00",
    "explanation": "The output first shows the total scores for each student, then the average score for each subject. \n1. **Student Totals:** This is computed by iterating through each row of the `scores` 2D array (representing a student) using an outer loop, and then an inner loop sums up the 3 subject scores for that student. For Student 1, `80+90+70 = 240`.\n2. **Subject Averages:** This involves iterating through each column (representing a subject) using an outer loop, and an inner loop sums up the scores for that specific subject across all 5 students. The total sum is then divided by 5 (the number of students). For Subject 1, `(80+60+90+75+50)/5 = 71.00`.\nThis demonstrates the practical application of **2D arrays** and **nested loops** for organizing and analyzing structured data, performing row-wise and column-wise aggregations typical in data processing scenarios."
  }
]

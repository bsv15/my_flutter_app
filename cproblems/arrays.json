[
  {
    "topic": "Arrays",
    "level": "Easy",
    "title": "Initialize and Print Array",
    "description": "Declare an integer array of size 5. Initialize it with values 10, 20, 30, 40, 50. Then, use a `for` loop to print each element of the array, each on a new line.",
    "constraints": "Array size is fixed at 5.",
    "sampleInput": "None",
    "sampleOutput": "10\n20\n30\n40\n50"
  },
  {
    "topic": "Arrays",
    "level": "Easy",
    "title": "Accessing Array Elements",
    "description": "Write a C program that declares a character array (string) `char name[] = \"C-Program\";`. Print the character at index 0, index 2, and the last character using array indexing.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "First character: C\nThird character: P\nLast character: m"
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Sum of Array Elements",
    "description": "Write a C program that reads 5 integers from the user and stores them in an array. Calculate and print the sum of all elements in the array.",
    "constraints": "Array size is fixed at 5. Input integers between -100 and 100.",
    "sampleInput": "10\n20\n30\n40\n50",
    "sampleOutput": "Sum of array elements: 150"
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Find Maximum in Array",
    "description": "Write a C program that reads 5 integers from the user into an array. Find and print the largest element in the array.",
    "constraints": "Array size is fixed at 5. Input integers between -1000 and 1000.",
    "sampleInput": "45\n12\n78\n33\n90",
    "sampleOutput": "Maximum element: 90"
  },
  {
    "topic": "Arrays",
    "level": "Medium",
    "title": "Reverse Array Elements",
    "description": "Write a C program that reads 5 integers into an array. Then, print the elements of the array in reverse order.",
    "constraints": "Array size is fixed at 5. Input integers between 1 and 100.",
    "sampleInput": "1\n2\n3\n4\n5",
    "sampleOutput": "Reversed array: 5 4 3 2 1"
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Element Search in Array",
    "description": "Write a C program that takes 10 integers as input into an array. Then, take an additional integer `search_key` as input. Search for `search_key` in the array. If found, print 'Element found at index: [index]'. If not found, print 'Element not found.'. If found multiple times, print the first index it appears at.",
    "constraints": "Array size is 10. All integers between 0 and 100.",
    "sampleInput": "10 20 30 40 50 60 70 80 90 100\n70",
    "sampleOutput": "Element found at index: 6"
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Count Frequency of Elements",
    "description": "Write a C program that reads 10 integers into an array (assume numbers are between 1 and 10). Count and print the frequency of each distinct element in the array. For example, if '5' appears 3 times, print '5 appears 3 times'.",
    "constraints": "Array size 10. Elements 1-10.",
    "sampleInput": "1 2 2 3 1 4 5 3 2 1",
    "sampleOutput": "1 appears 3 times\n2 appears 3 times\n3 appears 2 times\n4 appears 1 time\n5 appears 1 time"
  },
  {
    "topic": "Arrays",
    "level": "Hard",
    "title": "Matrix Addition (2x2)",
    "description": "Write a C program that reads two 2x2 integer matrices (A and B) from the user, element by element. Calculate their sum (A + B) and print the resulting 2x2 matrix.",
    "constraints": "Matrix elements will be integers between -100 and 100.",
    "sampleInput": "Matrix A:\n1 2\n3 4\nMatrix B:\n5 6\n7 8",
    "sampleOutput": "Sum Matrix:\n6 8\n10 12"
  },
  {
    "topic": "Arrays",
    "level": "Tricky",
    "title": "Array Boundaries and Segmentation Fault",
    "description": "Write a C program that declares an integer array of size 5. Attempt to write a value to an index outside its bounds (e.g., `arr[5] = 100;`). Compile and run the program. Describe what happens (e.g., error, warning, crash - likely a Segmentation Fault). Explain why this occurs in C, emphasizing the lack of bounds checking.",
    "constraints": "None (this problem is about demonstrating an error).",
    "sampleInput": "None",
    "sampleOutput": "Program will likely crash or exhibit undefined behavior (e.g., Segmentation fault) during runtime. (Explanation about why this happens and buffer overflow concepts needed from user)."
  },
  {
    "topic": "Arrays",
    "level": "Real World Problem",
    "title": "Student Exam Score Analysis",
    "description": "Imagine you have 5 students and their scores for 3 subjects stored in a 2D array (5 rows, 3 columns). Write a C program to:\n1. Read all 15 scores (integers 0-100) from the user.\n2. Calculate and print the total score for each student.\n3. Calculate and print the average score for each subject.",
    "constraints": "Scores are integers 0-100.",
    "sampleInput": "Student 1: 80 90 70\nStudent 2: 60 70 80\nStudent 3: 90 85 95\nStudent 4: 75 65 85\nStudent 5: 50 60 70",
    "sampleOutput": "Student 1 Total: 240\nStudent 2 Total: 210\n...\nSubject 1 Average: [calculated_avg]\nSubject 2 Average: [calculated_avg]\nSubject 3 Average: [calculated_avg]"
  }
]

[
  {
    "topic": "File Handling",
    "level": "Easy",
    "title": "Write a Simple Message to a Text File",
    "description": "Write a C program that demonstrates the basic process of writing content to a text file. The program should create a new file named `message.txt` in the same directory as the executable. It should then write the string 'Hello, C File Handling!' into this file. After writing the message, the file must be properly closed. The program should print a confirmation message to the console upon successful file creation and writing. This problem introduces `fopen()` in 'w' mode, `fprintf()`, and `fclose()`.",
    "constraints": "The output file must be named `message.txt`. The content to be written is fixed. Handle potential file open errors gracefully (e.g., print an error if `fopen` returns `NULL`).",
    "sampleInput": "None",
    "sampleOutput": "Successfully wrote 'Hello, C File Handling!' to message.txt."
  },
  {
    "topic": "File Handling",
    "level": "Easy",
    "title": "Read and Display Entire Content of a Text File",
    "description": "Given an existing text file named `data.txt` (assume this file is already present in the same directory and contains multiple lines of text, e.g., 'Line 1\\nLine 2\\nFinal Line.'), write a C program to open this file in read mode. Your program should then read its entire content, character by character, until the end of the file is reached. As each character is read, print it to the console. Finally, ensure the file is properly closed. This problem demonstrates `fopen()` in 'r' mode, `fgetc()`, and checking for `EOF`.",
    "constraints": "The `data.txt` file is assumed to exist. Each line in `data.txt` will have a maximum length of 100 characters. The file will not exceed 10 lines.",
    "sampleInput": "Content of data.txt:\nThis is line one.\nThis is line two.",
    "sampleOutput": "Content from data.txt:\nThis is line one.\nThis is line two."
  },
  {
    "topic": "File Handling",
    "level": "Medium",
    "title": "Append User Input to an Existing Log File",
    "description": "Develop a C program that allows a user to append new messages to a log file. The program should prompt the user to enter a short message (a single line of text). This message, along with a newline character, should then be appended to a file named `activity_log.txt`. If `activity_log.txt` does not exist, it should be created. The program should successfully append two distinct messages provided by the user. This problem introduces `fopen()` in 'a' (append) mode and `fprintf()` or `fputs()`.",
    "constraints": "The message entered by the user will be a single line with a maximum length of 80 characters. The program should demonstrate appending at least two messages.",
    "sampleInput": "Enter message 1: User logged in\nEnter message 2: Item added to cart",
    "sampleOutput": "Message 'User logged in' appended to activity_log.txt.\nMessage 'Item added to cart' appended to activity_log.txt.\n(The `activity_log.txt` file will contain both messages, each on a new line.)"
  },
  {
    "topic": "File Handling",
    "level": "Medium",
    "title": "Count Lines in a Text File",
    "description": "Write a C program that counts the total number of lines in a text file. The program should prompt the user to enter the `filename`. It should then open the specified file, read it character by character, and count how many newline characters (`\\n`) it encounters. The final count represents the number of lines. Print the total line count to the console. Crucially, your program must include error handling for the scenario where the specified file does not exist, printing an appropriate 'File not found' message. This problem combines file reading with basic counting logic and error handling.",
    "constraints": "The filename can be up to 50 characters. The file content can have up to 100 lines, with each line up to 200 characters long.",
    "sampleInput": "Enter filename: my_document.txt (Assume my_document.txt contains:\nHeader\nItem 1\nItem 2\nFooter)",
    "sampleOutput": "Number of lines in 'my_document.txt': 4"
  },
  {
    "topic": "File Handling",
    "level": "Medium",
    "title": "Copy Content from One Text File to Another",
    "description": "Create a C program that copies the entire textual content from a `source_file.txt` to a `destination_file.txt`. The program should prompt the user for both the source and destination filenames. It must open the source file in read mode and the destination file in write mode. Read character by character from the source and write each character to the destination until the end of the source file. If the `source_file.txt` does not exist, print an error message. If the `destination_file.txt` already exists, it should be overwritten. This problem demonstrates file-to-file data transfer.",
    "constraints": "Filenames can be up to 50 characters. Source file size will not exceed 1KB. Ensure error handling for source file not found.",
    "sampleInput": "Enter source filename: original.txt (contains 'Hello Copy')\nEnter destination filename: new_copy.txt",
    "sampleOutput": "Content successfully copied from original.txt to new_copy.txt.\n(The `new_copy.txt` file will then contain 'Hello Copy')"
  },
  {
    "topic": "File Handling",
    "level": "Hard",
    "title": "Student Record Management using Text File (CSV Format)",
    "description": "Define a structure `struct Student` with `roll_no` (integer), `name` (character array, max 30 chars), and `gpa` (floating-point). Write a C program to manage simple student records in a text file named `students.csv`.\n1.  **Write Records:** Open `students.csv` in write mode (`'w'`). Prompt the user to enter data (roll number, name, GPA) for 3 students. Write each student's data into the file on a new line, formatted as Comma Separated Values (CSV): `RollNo,Name,GPA` (e.g., `101,Alice Johnson,3.75`).\n2.  **Read and Display Records:** After writing, close the file. Then, reopen `students.csv` in read mode (`'r'`). Read each line from the file, parse the data (e.g., using `fscanf` or `fgets` with string parsing), and print the student details to the console in a user-friendly format. Handle potential file open errors. This problem combines structures with file I/O and basic string parsing.",
    "constraints": "Max 3 students for input. Roll No: 1-999. Name: max 30 chars (no commas). GPA: 0.0-4.0 (two decimal places). Ensure correct CSV formatting.",
    "sampleInput": "Student 1:\nRoll No: 101\nName: Alice\nGPA: 3.75\nStudent 2:\nRoll No: 102\nName: Bob\nGPA: 3.50\nStudent 3:\nRoll No: 103\nName: Charlie\nGPA: 3.90",
    "sampleOutput": "Student records successfully written to students.csv.\n\n--- Student Records from File ---\nRoll No: 101, Name: Alice, GPA: 3.75\nRoll No: 102, Name: Bob, GPA: 3.50\nRoll No: 103, Name: Charlie, GPA: 3.90"
  },
  {
    "topic": "File Handling",
    "level": "Hard",
    "title": "Simple Data Logging with Binary Files",
    "description": "Write a C program that demonstrates writing and reading primitive data types (specifically integers) to and from a **binary file**. Prompt the user to enter 5 integer values. Use `fwrite()` to write these 5 integers directly into a binary file named `numbers.bin`. After writing, close the file. Then, reopen `numbers.bin` in binary read mode (`'rb'`), use `fread()` to read the 5 integers back into an array, and print them to the console to verify the data integrity. This problem introduces binary file I/O, which is crucial for efficient storage of structured data.",
    "constraints": "Input integers will be between -1000 and 1000. Ensure `fwrite` and `fread` are used correctly with `sizeof` and count arguments.",
    "sampleInput": "Enter 5 integers: 10 20 30 40 50",
    "sampleOutput": "Successfully wrote 5 integers to numbers.bin.\nNumbers read from numbers.bin: 10 20 30 40 50"
  },
  {
    "topic": "File Handling",
    "level": "Hard",
    "title": "Search and Update a Record in a Text File",
    "description": "Consider a `products.txt` file where each line represents a product in the format: `ID,Name,Price` (e.g., `101,Laptop,1200.50`). Write a C program that allows a user to update the price of an existing product.\n1.  Prompt the user for a `product_id` to search for and a `new_price` (float).\n2.  Your program must read all records from `products.txt`.\n3.  When the matching `product_id` is found, update its price in memory.\n4.  After processing all records, **rewrite the entire set of records (including the updated one)** back to `products.txt`, effectively overwriting the old file content. Print a confirmation message if the product was updated, or 'Product not found' if the ID doesn't exist. This problem involves file reading, parsing, in-memory modification, and full file rewriting.",
    "constraints": "Assume `products.txt` exists initially with at least 2-3 records. Max 5 products in total. IDs are unique. Name max 30 chars. Price 0.01-5000.00. Input ID/price will be valid.",
    "sampleInput": "products.txt (initial content):\n101,Laptop,1200.50\n102,Mouse,25.00\n103,Keyboard,75.00\n\nEnter Product ID to update: 101\nEnter New Price: 1250.00",
    "sampleOutput": "Product 101 price updated to 1250.00.\n(The `products.txt` file will then contain:\n101,Laptop,1250.00\n102,Mouse,25.00\n103,Keyboard,75.00)"
  },
  {
    "topic": "File Handling",
    "level": "Tricky",
    "title": "Random File Access using `fseek()` and `ftell()`",
    "description": "Write a C program that demonstrates non-sequential (random) access within a file. Follow these steps:\n1.  Create and write a string 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' into a text file named `alphabets.txt`.\n2.  Close the file.\n3.  Reopen `alphabets.txt` in read mode (`'r'`).\n4.  Use `fseek()` to move the file pointer to the **10th character** from the beginning of the file (which is at index 9, considering zero-based indexing). Read a single character from this new position and print it.\n5.  Immediately after reading, use `ftell()` to determine and print the **current position of the file pointer**.\nIn your explanation, detail how `fseek()` allows movement to specific positions and how `ftell()` reports the current position, helping understand random access capabilities. This problem delves into direct file pointer manipulation.",
    "constraints": "The string to write is fixed. File names are fixed. The file content is simple ASCII characters.",
    "sampleInput": "None",
    "sampleOutput": "Character at 10th position (index 9): J\nCurrent file pointer position: 10\n(User's explanation of `fseek` and `ftell` functionality is expected in the solution.)"
  },
  {
    "topic": "File Handling",
    "level": "Real World Problem",
    "title": "Simple Command-Line To-Do List Manager",
    "description": "Develop a C program that acts as a basic command-line to-do list manager. It should store tasks in a text file named `tasks.txt`. The program must offer a menu-driven interface with the following options:\n1.  **Add Task:** Prompts the user to enter a new task description (a single line of text). This task should be appended to `tasks.txt` on a new line.\n2.  **View Tasks:** Reads all tasks from `tasks.txt` and prints them to the console, numbering each task sequentially.\n3.  **Clear All Tasks:** Empties the `tasks.txt` file, effectively deleting all tasks.\n4.  **Exit:** Terminates the program.\nYour program must handle scenarios where `tasks.txt` does not exist (it should be created), and implement robust file opening and closing. This problem integrates multiple file handling operations, loops, and conditional logic in a practical application.",
    "constraints": "Task descriptions can have a maximum length of 100 characters. The `tasks.txt` file can contain up to 10 tasks for practical testing. Input is assumed to be valid per menu choice.",
    "sampleInput": "1 (Add Task)\nBuy groceries\n1 (Add Task)\nClean room\n2 (View Tasks)\n3 (Clear All Tasks)\n2 (View Tasks)\n4 (Exit)",
    "sampleOutput": "--- To-Do List Menu ---\n1. Add Task\n2. View Tasks\n3. Clear All Tasks\n4. Exit\nEnter your choice: 1\nEnter new task: Buy groceries\nTask 'Buy groceries' added.\nEnter your choice: 1\nEnter new task: Clean room\nTask 'Clean room' added.\nEnter your choice: 2\n--- Your Tasks ---\n1. Buy groceries\n2. Clean room\nEnter your choice: 3\nAll tasks cleared from tasks.txt.\nEnter your choice: 2\n--- Your Tasks ---\nNo tasks found.\nEnter your choice: 4\nExiting To-Do List Manager. Goodbye!"
  }
]

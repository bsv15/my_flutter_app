[
  {
    "topic": "Basics and I/O",
    "level": "Easy",
    "title": "Welcome to C!",
    "description": "Write a simple C program that prints a warm greeting message to the standard output. The message should be 'Welcome to C Programming!' followed by a newline character. This exercise focuses on the fundamental `printf()` function and ensures your development environment is set up correctly for basic output operations.",
    "constraints": "None. The program should simply print the specified string.",
    "sampleInput": "None",
    "sampleOutput": "Welcome to C Programming!",
    "explanation": "The output `Welcome to C Programming!` is generated directly by a single call to the **`printf()` function**. This function writes the specified string literal to the standard output (typically the console). The trailing newline character (implied by the problem description, often `\\n` in `printf`) ensures that the cursor moves to the next line after printing, making this a straightforward demonstration of basic **output operations** in C."
  },
  {
    "topic": "Basics and I/O",
    "level": "Easy",
    "title": "Display Your Age and Height",
    "description": "Declare an integer variable `age` and a floating-point variable `height`. Assign your current age (e.g., 30) to `age` and your height in meters (e.g., 1.75) to `height`. Then, print both values to the console using a descriptive sentence. The output should be formatted such that height is displayed with two decimal places. This problem tests variable declaration, assignment, and formatted output using `printf()` for different data types.",
    "constraints": "Age will be a positive integer. Height will be a positive floating-point number.",
    "sampleInput": "None (values are hardcoded in the program)",
    "sampleOutput": "My age is 30 years and my height is 1.75 meters.",
    "explanation": "The output `My age is 30 years and my height is 1.75 meters.` is produced by a `printf()` statement that uses **format specifiers**. The integer variable `age` (30) is printed using `%d`. The floating-point variable `height` (1.75) is printed using `%.2f`, which ensures it displays exactly **two decimal places**. This demonstrates how to declare variables of different **data types** (`int` and `float`), assign values, and then use `printf()` for **formatted output** to display them correctly within a string."
  },
  {
    "topic": "Basics and I/O",
    "level": "Medium",
    "title": "Sum, Difference, and Product of Two Numbers",
    "description": "Develop a C program that prompts the user to enter two whole numbers. Read these two integers from the standard input. Subsequently, calculate their sum, their difference (first number minus second), and their product. Print each result on a new line, clearly labeled, to demonstrate basic arithmetic operations and input reading with `scanf()`.",
    "constraints": "Input integers will be between -1000 and 1000. Ensure robust input handling if necessary, though basic `scanf` is sufficient for this level.",
    "sampleInput": "10\n25",
    "sampleOutput": "Sum: 35\nDifference: -15\nProduct: 250",
    "explanation": "Given the `sampleInput` of `10` and `25`:\n1. The program uses `scanf(\"%d\", &num1)` and `scanf(\"%d\", &num2)` to read these values into integer variables.\n2. **Sum:** `num1 + num2` calculates `10 + 25 = 35`.\n3. **Difference:** `num1 - num2` calculates `10 - 25 = -15`.\n4. **Product:** `num1 * num2` calculates `10 * 25 = 250`.\nEach result is then printed on a new line using `printf()`. This demonstrates fundamental **input reading with `scanf()`** and the application of basic **arithmetic operators** (`+`, `-`, `*`) in C."
  },
  {
    "topic": "Basics and I/O",
    "level": "Medium",
    "title": "Read and Display a Single Character and Its ASCII Value",
    "description": "Create a C program that asks the user to input a single character. Read this character from the keyboard using `scanf()`. After reading, print the character back to the console, followed by its corresponding ASCII (American Standard Code for Information Interchange) decimal value. This exercise reinforces character input/output and understanding character-to-integer type conversion in C.",
    "constraints": "Input will be a single printable ASCII character. The character should be read without issues related to leftover newline characters from previous inputs.",
    "sampleInput": "A",
    "sampleOutput": "You entered character: A, Its ASCII Value: 65",
    "explanation": "When the user inputs `A`:\n1. `scanf(\"%c\", &ch)` reads the character `A` into a `char` variable, say `ch`.\n2. The first part of the `printf()` uses `%c` to display the character stored in `ch`, outputting `A`.\n3. The second part uses `%d` to display the *same `char` variable `ch`*. In C, a `char` is an integer type, and when printed with `%d`, its underlying **ASCII decimal value** is shown. The ASCII value for 'A' is 65, which is why `65` is printed. This effectively demonstrates how `char` values are intrinsically linked to their integer ASCII representations."
  },
  {
    "topic": "Basics and I/O",
    "level": "Medium",
    "title": "Circumference and Area of a Circle",
    "description": "Write a C program that calculates the circumference and area of a circle. Prompt the user to enter the **radius** (a floating-point number) of the circle. Use the mathematical constant $\\pi$ (Pi) as 3.14159. Calculate the circumference using the formula $C = 2 \\times \\pi \\times r$ and the area using $A = \\pi \\times r^2$. Print both results, formatted to two decimal places. This problem involves floating-point arithmetic and `scanf()` for floating-point input.",
    "constraints": "Input radius will be a positive floating-point number (e.g., 0.1 to 100.0).",
    "sampleInput": "5.0",
    "sampleOutput": "Circumference: 31.42\nArea: 78.54",
    "explanation": "Given the `sampleInput` `5.0` for the radius and `PI = 3.14159`:\n1. The program reads `5.0` into a `float` or `double` variable using `scanf(\"%f\", &radius)` or `scanf(\"%lf\", &radius)`.\n2. **Circumference:** It calculates `2 * PI * radius = 2 * 3.14159 * 5.0 = 31.4159`. Printed with `%.2f`, this rounds to `31.42`.\n3. **Area:** It calculates `PI * radius * radius = 3.14159 * 5.0 * 5.0 = 78.53975`. Printed with `%.2f`, this rounds to `78.54`.\nThis demonstrates accurate **floating-point arithmetic** and `printf()`'s ability to control **output precision** with `%.2f`."
  },
  {
    "topic": "Basics and I/O",
    "level": "Hard",
    "title": "Temperature Conversion: Celsius to Fahrenheit and Kelvin",
    "description": "Develop a C program that converts a temperature given in Celsius to both Fahrenheit and Kelvin. Prompt the user to enter the temperature in Celsius (a floating-point number). Apply the conversion formulas: $F = (C \\times 9/5) + 32$ for Fahrenheit and $K = C + 273.15$ for Kelvin. Print the original Celsius temperature and the converted Fahrenheit and Kelvin temperatures, all formatted to two decimal places. This problem tests handling floating-point precision and multiple calculations.",
    "constraints": "Input temperature will be between -100.0 and 500.0 Celsius.",
    "sampleInput": "25.0",
    "sampleOutput": "Temperature in Celsius: 25.00 C\nTemperature in Fahrenheit: 77.00 F\nTemperature in Kelvin: 298.15 K",
    "explanation": "For an input Celsius temperature of `25.0`:\n1. **Fahrenheit Conversion:** The formula `(C * 9/5) + 32` becomes `(25.0 * 1.8) + 32 = 45.0 + 32 = 77.0`. \n2. **Kelvin Conversion:** The formula `C + 273.15` becomes `25.0 + 273.15 = 298.15`.\nBoth results are then printed using `%.2f` for precise two-decimal formatting. This illustrates the application of **mathematical formulas** involving floating-point numbers and handling **multiple derived outputs** from a single input."
  },
  {
    "topic": "Basics and I/O",
    "level": "Hard",
    "title": "Swapping Two Numbers Without a Temporary Variable",
    "description": "Write a C program that takes two integer numbers, `num1` and `num2`, as input from the user. Your task is to swap their values *without* using any third or temporary variable. This can be achieved using arithmetic operations (addition/subtraction or XOR bitwise operation). After swapping, print the new values of `num1` and `num2`, clearly indicating that they have been swapped. This problem challenges understanding of variable manipulation.",
    "constraints": "Input integers will be between -500 and 500. Ensure the method chosen works correctly for all integer ranges within typical `int` limits, including zero or negative numbers if applicable to the method.",
    "sampleInput": "5\n10",
    "sampleOutput": "Before swapping: num1 = 5, num2 = 10\nAfter swapping: num1 = 10, num2 = 5",
    "explanation": "Given `num1 = 5` and `num2 = 10`:\nOne common arithmetic method for swapping without a temporary variable is:\n1. `num1 = num1 + num2;` (num1 becomes 5 + 10 = 15)\n2. `num2 = num1 - num2;` (num2 becomes 15 - 10 = 5)  -> `num2` now holds `num1`'s original value.\n3. `num1 = num1 - num2;` (num1 becomes 15 - 5 = 10)   -> `num1` now holds `num2`'s original value.\nThe output `After swapping: num1 = 10, num2 = 5` directly reflects these steps, confirming the successful **in-place value exchange** without additional memory, which is a key concept in efficient variable manipulation."
  },
  {
    "topic": "Basics and I/O",
    "level": "Tricky",
    "title": "Input Buffer Flushing: Reading Integer then Character",
    "description": "Write a C program that first prompts the user to enter an integer, and immediately after, prompts them to enter a single character. Print both the integer and the character that were read. Pay close attention to a common pitfall when mixing `scanf(\"%d\")` and `scanf(\"%c\")`: the leftover newline character in the input buffer. You will likely find the character read is not the one you intended. Your solution should demonstrate this problem and then provide a correct method to handle the input buffer to ensure the character is read as expected (e.g., by consuming the leftover newline).",
    "constraints": "The integer will be between 1 and 100. The character will be any printable ASCII character. The solution should explicitly address the newline character issue.",
    "sampleInput": "123\nA",
    "sampleOutput": "You entered integer: 123\nYou entered character: A\n(Explanation required from user about the newline issue and its resolution)",
    "explanation": "Given the input `123` followed by a newline and then `A`:\n1. `scanf(\"%d\", &integer_var)` reads `123`. However, the **newline character (`\\n`)** pressed after `123` remains in the keyboard's input buffer.\n2. If a direct `scanf(\"%c\", &char_var)` follows, it will *immediately* read this leftover newline character from the buffer, not the intended `A`.\n3. The output shows `A` was correctly read, indicating the program implemented a **buffer-flushing technique**. This is typically done by adding a space before `%c` in `scanf` (e.g., `scanf(\" %c\", &char_var)`), which tells `scanf` to consume any whitespace characters, including the newline, before reading the actual character. Another method is to use `getchar()` after the integer `scanf` to explicitly consume the newline. This demonstrates a crucial aspect of C's **input buffer handling**."
  },
  {
    "topic": "Basics and I/O",
    "level": "Real World Problem",
    "title": "Simple Product Price Calculator with Sales Tax",
    "description": "Imagine you're building a basic point-of-sale system. Write a C program that calculates the total cost of an item including sales tax. Prompt the user to enter the `item_price` (a floating-point number) and the `quantity` purchased (an integer). Assume a fixed `sales_tax_rate` of 5% (0.05). Calculate the `subtotal` (price * quantity), then the `tax_amount`, and finally the `total_cost`. Print all these values, formatted to two decimal places, prefixed with a currency symbol (e.g., '$'). This problem simulates a common retail calculation and tests understanding of mixed-type arithmetic.",
    "constraints": "Item Price: 0.01 to 1000.00. Quantity: 1 to 100. Sales tax rate is a constant 0.05.",
    "sampleInput": "Item Price: 15.75\nQuantity: 3",
    "sampleOutput": "Subtotal: $47.25\nTax Amount (5%): $2.36\nTotal Cost: $49.61",
    "explanation": "Given `item_price = 15.75` and `quantity = 3`, with `sales_tax_rate = 0.05`:\n1. **Subtotal Calculation:** `item_price * quantity = 15.75 * 3 = 47.25`. This is printed as `$47.25`.\n2. **Tax Amount Calculation:** `subtotal * sales_tax_rate = 47.25 * 0.05 = 2.3625`. When formatted to two decimal places using `%.2f`, this rounds to `$2.36`.\n3. **Total Cost Calculation:** `subtotal + tax_amount = 47.25 + 2.3625 = 49.6125`. This rounds to `$49.61`.\nThis output demonstrates **mixed-type arithmetic** (float * int), **floating-point precision management** for currency, and sequentially derived calculations for a common **business logic** problem."
  }
]

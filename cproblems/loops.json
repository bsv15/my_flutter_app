[
  {
    "topic": "Loops and Iteration",
    "level": "Easy",
    "title": "Print Numbers 1 to N (for loop)",
    "description": "Write a C program that takes a positive integer `N` as input. Use a `for` loop to print all numbers from 1 to `N`, each on a new line.",
    "constraints": "N will be between 1 and 20.",
    "sampleInput": "5",
    "sampleOutput": "1\n2\n3\n4\n5"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Easy",
    "title": "Countdown (while loop)",
    "description": "Write a C program that takes a positive integer `start` as input. Use a `while` loop to print a countdown from `start` down to 1, followed by 'Blast off!'. Each number should be on a new line.",
    "constraints": "start will be between 1 and 10.",
    "sampleInput": "3",
    "sampleOutput": "3\n2\n1\nBlast off!"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Medium",
    "title": "Sum of First N Natural Numbers",
    "description": "Write a C program that takes a positive integer `N` as input. Calculate the sum of the first `N` natural numbers (1 + 2 + ... + N) using a loop, and print the result.",
    "constraints": "N will be between 1 and 100.",
    "sampleInput": "10",
    "sampleOutput": "Sum of first 10 natural numbers: 55"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Medium",
    "title": "Factorial Calculation",
    "description": "Write a C program that takes a non-negative integer `num` as input. Calculate its factorial (num!) using a loop. The factorial of 0 is 1. Print the calculated factorial.",
    "constraints": "num will be between 0 and 10.",
    "sampleInput": "5",
    "sampleOutput": "Factorial of 5: 120"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Medium",
    "title": "Multiplication Table",
    "description": "Write a C program that takes an integer `num` as input. Print its multiplication table from 1 to 10, using the format `num x i = result` for each line.",
    "constraints": "num will be between 1 and 12.",
    "sampleInput": "7",
    "sampleOutput": "7 x 1 = 7\n7 x 2 = 14\n...\n7 x 10 = 70"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Hard",
    "title": "Reverse a Number",
    "description": "Write a C program that takes a positive integer as input and prints its digits in reverse order. For example, if the input is 12345, the output should be 54321.",
    "constraints": "Input integer will be between 1 and 1000000000.",
    "sampleInput": "12345",
    "sampleOutput": "54321"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Hard",
    "title": "Prime Number Checker",
    "description": "Write a C program that takes a positive integer `num` as input and determines if it is a 'Prime Number' or 'Not a Prime Number'. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.",
    "constraints": "num will be between 2 and 1000.",
    "sampleInput": "29",
    "sampleOutput": "Prime Number"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Hard",
    "title": "Fibonacci Sequence",
    "description": "Write a C program that takes a positive integer `N` as input. Print the first `N` terms of the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones (e.g., 0, 1, 1, 2, 3, 5, ...).",
    "constraints": "N will be between 1 and 20.",
    "sampleInput": "8",
    "sampleOutput": "0 1 1 2 3 5 8 13"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Tricky",
    "title": "Loop with Break and Continue",
    "description": "Write a C program that loops from 1 to 10. Inside the loop, if the number is 3, skip to the next iteration (using `continue`). If the number is 7, exit the loop immediately (using `break`). Print each number before applying the conditional logic. Observe and explain the output.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "1\n2\n4\n5\n6"
  },
  {
    "topic": "Loops and Iteration",
    "level": "Real World Problem",
    "title": "Simple Bank Account Balance Tracker",
    "description": "Write a C program that simulates a basic bank account. Start with an initial `balance` (float). Then, continuously ask the user for a 'transaction type' ('D' for deposit, 'W' for withdrawal) and an `amount` (float). Update the balance. If a withdrawal exceeds the balance, print 'Insufficient Funds' and do not process it. Continue until the user enters 'Q' to quit. Print the final balance.",
    "constraints": "Initial balance: 0.0 to 10000.0. Amounts: 0.01 to 5000.00.",
    "sampleInput": "Initial balance: 100.00\nD 50.00\nW 200.00\nD 100.00\nQ",
    "sampleOutput": "Current Balance: 100.00\nDeposit 50.00. New Balance: 150.00\nInsufficient Funds. Balance: 150.00\nDeposit 100.00. New Balance: 250.00\nFinal Balance: 250.00"
  }
]

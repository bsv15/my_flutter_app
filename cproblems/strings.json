[
  {
    "topic": "Strings",
    "level": "Easy",
    "title": "String Initialization and Basic Printing",
    "description": "Write a C program that declares a character array (which is used to represent a C-style string) named `greeting`. Initialize this array directly with the string literal 'Hello, String Handling!'. After initialization, use `printf()` with the `%s` format specifier to print the entire string to the console. This problem serves as a fundamental introduction to declaring and printing strings in C.",
    "constraints": "The `greeting` string should have a maximum length of 25 characters to accommodate the given message and the null terminator.",
    "sampleInput": "None",
    "sampleOutput": "Hello, String Handling!",
    "explanation": "The output `Hello, String Handling!` directly reflects the literal string that the `greeting` character array was initialized with. The `printf()` function, using the `%s` format specifier, is designed to interpret a character array as a null-terminated string and print its contents until the null character is encountered."
  },
  {
    "topic": "Strings",
    "level": "Easy",
    "title": "Read and Display User's Favorite City",
    "description": "Create a C program that prompts the user to enter their favorite city (assume it's a single word without spaces). Read this city name into a character array. After reading, print a personalized message like 'Your favorite city is: [city_name]' to the console. This problem focuses on basic string input using `scanf()` and output using `printf()` with `%s`.",
    "constraints": "The city name will be a single word, with a maximum length of 20 characters (including the null terminator). Assume no spaces in the input.",
    "sampleInput": "London",
    "sampleOutput": "Your favorite city is: London",
    "explanation": "The output `Your favorite city is: London` is generated by the program first reading the user's input \"London\" into a string variable. Then, it uses `printf()` with the `%s` format specifier to embed the content of that string variable into the predefined output message."
  },
  {
    "topic": "Strings",
    "level": "Medium",
    "title": "Manual String Length Calculation (Without `strlen()`)",
    "description": "Write a C program that prompts the user to enter a string (which can include spaces). Your primary task is to calculate and print the **length** of this string *without using the standard library function `strlen()`*. You must achieve this by iterating through the character array until you encounter the null terminator (`\\0`), which marks the end of a C string. This problem deepens understanding of how C strings are terminated and iterated.",
    "constraints": "The input string will have a maximum length of 50 characters (including spaces, excluding the null terminator).",
    "sampleInput": "Programming in C",
    "sampleOutput": "The length of the string is: 17",
    "explanation": "For the input `Programming in C`, the program iterates through each character of the string, incrementing a counter for each character it encounters. It stops counting when it reaches the null terminator (`\\0`), which marks the end of the string. The characters are: 'P', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g', ' ', 'i', 'n', ' ', 'C'. Counting these characters yields a total of 17. Therefore, the output `The length of the string is: 17` accurately reflects the calculated length."
  },
  {
    "topic": "Strings",
    "level": "Medium",
    "title": "String Concatenation using `strcat()`",
    "description": "Develop a C program that reads two separate strings from the user. For instance, you can ask for a 'first name' and a 'last name'. Your program should then concatenate these two strings to form a 'full name' string, with a space placed between the first and last names. Print the resulting full name. You **must use the standard library function `strcat()`** (or `strncat()`) for concatenation. Ensure your destination array is large enough to hold the combined string, including the space and null terminator. Remember to include `<string.h>`.",
    "constraints": "Each input string (first name, last name) will have a maximum length of 20 characters. The combined full name, including the space and null terminator, should not exceed 50 characters.",
    "sampleInput": "John\nDoe",
    "sampleOutput": "Full Name: John Doe",
    "explanation": "The output `Full Name: John Doe` is produced by the program reading \"John\" as the first string and \"Doe\" as the second string. It then concatenates \"John\", a space, and \"Doe\" into a single string variable using string manipulation functions, resulting in the combined full name."
  },
  {
    "topic": "Strings",
    "level": "Medium",
    "title": "String Copy using `strcpy()`",
    "description": "Write a C program that demonstrates string copying. Declare a source character array `char source[] = \"Copy This String!\";`. Then, declare a destination character array `char destination[50];` (or a similar size) that is sufficiently large to hold the content of the source string. Use the standard library function `strcpy()` (or `strncpy()`) to copy the contents from the `source` array to the `destination` array. Finally, print the `destination` array to verify that the string has been successfully copied. Remember to include `<string.h>`.",
    "constraints": "The source string is fixed as specified. The destination array must be adequately sized to prevent buffer overflow.",
    "sampleInput": "None",
    "sampleOutput": "Original source string: Copy This String!\nCopied string to destination: Copy This String!",
    "explanation": "The output first shows the literal content of the `source` string: `Copy This String!`. The second line, `Copied string to destination: Copy This String!`, confirms that the `strcpy()` function successfully duplicated the characters from the `source` array into the `destination` array, resulting in an identical string being printed from the destination."
  },
  {
    "topic": "Strings",
    "level": "Hard",
    "title": "Reverse a String In-Place",
    "description": "Write a C program that prompts the user to enter a string (which can contain spaces). Your core task is to **reverse this string in-place**, meaning you should modify the original character array directly without creating a new, separate array to store the reversed version. This typically involves using two pointers (or indices), one starting from the beginning and one from the end, and swapping characters. After reversing, print the modified (reversed) string. This problem challenges your ability to manipulate array elements efficiently.",
    "constraints": "The input string will have a maximum length of 50 characters. It will consist of lowercase English letters and spaces.",
    "sampleInput": "hello world",
    "sampleOutput": "Original string: hello world\nReversed string: dlrow olleh",
    "explanation": "The output first displays the `Original string: hello world` as entered by the user. The program then processes this string by swapping characters from its ends towards the middle. For `hello world`, 'h' is swapped with 'd', 'e' with 'l', and so on, including the space. This in-place modification results in `dlrow olleh`, which is then printed as the `Reversed string: dlrow olleh`."
  },
  {
    "topic": "Strings",
    "level": "Hard",
    "title": "Count Vowels, Consonants, Digits, and Special Characters",
    "description": "Develop a C program that reads a string (a sentence or phrase) from the user. Your program should then analyze the string and count the occurrences of four distinct categories of characters:\n1.  **Vowels:** (a, e, i, o, u, case-insensitive)\n2.  **Consonants:** Any English alphabet character that is not a vowel (case-insensitive)\n3.  **Digits:** (0-9)\n4.  **Special Characters:** Any character that is not a letter, digit, or space (e.g., !, @, #, $, etc.)\nSpaces should be ignored in the counts. Print the count for each category. This problem involves iterating through a string, character classification, and conditional counting.",
    "constraints": "The input string will have a maximum length of 100 characters. It can contain English letters (upper/lower case), digits, spaces, and common special characters.",
    "sampleInput": "Programming in C 123!@",
    "sampleOutput": "Vowels: 5\nConsonants: 10\nDigits: 3\nSpecial Characters: 2",
    "explanation": "For the input `Programming in C 123!@`, the program iterates through each character and classifies it:\n- **Vowels:** 'o', 'a', 'i', 'i', 'e' are identified, totaling 5.\n- **Consonants:** 'P', 'r', 'g', 'r', 'm', 'm', 'n', 'g', 'n', 'C' are identified, totaling 10.\n- **Digits:** '1', '2', '3' are identified, totaling 3.\n- **Special Characters:** '!', '@' are identified, totaling 2.\nSpaces are ignored. The output accurately reflects these counts for each category."
  },
  {
    "topic": "Strings",
    "level": "Hard",
    "title": "Palindrome Checker (Case-Insensitive, Ignoring Spaces)",
    "description": "Write a C program that takes a string as input from the user and determines if it is a 'Palindrome' or 'Not a Palindrome'. A palindrome is a sequence of characters that reads the same forwards and backwards (e.g., 'madam', 'level'). For this problem, your program must implement the check in a **case-insensitive** manner and **ignore any spaces** within the string. For example, 'Race car' should be considered a palindrome. Print 'Palindrome' or 'Not a Palindrome' accordingly. This requires pre-processing the string (converting to uniform case, removing spaces) before the actual comparison.",
    "constraints": "Input string will have a maximum length of 50 characters. It will contain only English letters (upper/lower case) and spaces.",
    "sampleInput": "Madam",
    "sampleOutput": "The string 'Madam' is a Palindrome",
    "explanation": "For the input `Madam`, the program first normalizes the string by making it case-insensitive (e.g., converting 'Madam' to 'madam') and effectively ignoring spaces. It then compares the processed string from both ends inwards. Since 'madam' reads the same forwards and backwards, the program correctly identifies it as a palindrome, leading to the output `The string 'Madam' is a Palindrome`."
  },
  {
    "topic": "Strings",
    "level": "Tricky",
    "title": "String Comparison: `==` Operator vs. `strcmp()` Function",
    "description": "Write a C program to illustrate the crucial difference between using the `==` operator and the `strcmp()` standard library function when comparing strings. Declare two character arrays:\n1.  `char str1[] = \"test\";`\n2.  `char str2[] = \"test\";`\nAttempt to compare `str1` and `str2` using `if (str1 == str2)`. Then, compare them again using `if (strcmp(str1, str2) == 0)`. Print the result of both comparisons (e.g., 'Using ==: Equal/Not Equal' and 'Using strcmp: Equal/Not Equal'). In your explanation, clearly articulate *why* the `==` operator yields a different (and usually incorrect for content comparison) result compared to `strcmp()` when used with C strings. This problem highlights a common beginner mistake and a core concept of C memory management.",
    "constraints": "None. The strings are fixed as specified.",
    "sampleInput": "None",
    "sampleOutput": "Using ==: Not Equal\nUsing strcmp: Equal",
    "explanation": "The output `Using ==: Not Equal` occurs because `str1 == str2` compares the memory addresses where `str1` and `str2` are stored, not their content. Since they are separate arrays (even if holding the same string literal), their addresses are different. The output `Using strcmp: Equal` occurs because `strcmp(str1, str2)` compares the actual character sequences of the strings. Since both arrays contain the identical sequence 'test', `strcmp()` returns 0, indicating they are content-wise equal."
  },
  {
    "topic": "Strings",
    "level": "Real World Problem",
    "title": "Basic Text Censorship/Redaction",
    "description": "Develop a C program that simulates a basic text censorship tool. Prompt the user to enter a `sentence` (a string, e.g., 'This is a bad word example.'). Then, ask the user to input a `bad_word` (a single word). Your program should find all occurrences of the `bad_word` within the `sentence` and replace each occurrence with asterisks (`*`) of the *same length* as the `bad_word`. Finally, print the `censored_sentence`. If the `bad_word` is not found, print the original sentence. Assume case-sensitive replacement for simplicity and that bad words do not overlap. This problem involves string searching (`strstr()`), string manipulation, and loop control.",
    "constraints": "Sentence will have a maximum length of 100 characters. Bad word will have a maximum length of 10 characters. The bad word will not contain spaces.",
    "sampleInput": "Enter a sentence: This is a bad word example. Another bad word here.\nEnter a word to censor: bad",
    "sampleOutput": "Original sentence: This is a bad word example. Another bad word here.\nCensored sentence: This is a *** word example. Another *** word here.",
    "explanation": "The output first displays the `Original sentence: This is a bad word example. Another bad word here.` as input. The program then identifies all instances of the `bad_word` \"bad\" within this sentence. Each occurrence of \"bad\" is then replaced by three asterisks (`***`), maintaining the original length. This results in the `Censored sentence: This is a *** word example. Another *** word here.`, where the word \"bad\" has been redacted twice."
  }
]

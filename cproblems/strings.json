[
  {
    "topic": "Strings",
    "level": "Easy",
    "title": "String Initialization and Printing",
    "description": "Declare a character array (string) named `greeting` and initialize it with the value 'Hello, String!'. Print the entire string to the console.",
    "constraints": "Max string length 20 characters.",
    "sampleInput": "None",
    "sampleOutput": "Hello, String!"
  },
  {
    "topic": "Strings",
    "level": "Easy",
    "title": "Read and Print User's Favorite Color",
    "description": "Write a C program that prompts the user to enter their favorite color (a single word). Read the color into a character array and then print a message like 'Your favorite color is: [color]'.",
    "constraints": "Color name will be a single word, max 15 characters.",
    "sampleInput": "Blue",
    "sampleOutput": "Your favorite color is: Blue"
  },
  {
    "topic": "Strings",
    "level": "Medium",
    "title": "String Length Calculator (Manual)",
    "description": "Write a C program that reads a string from the user (can contain spaces). Calculate and print its length *without using `strlen()`*. You must iterate through the string until you find the null terminator.",
    "constraints": "Max string length 50 characters.",
    "sampleInput": "Programming in C",
    "sampleOutput": "Length of string: 17"
  },
  {
    "topic": "Strings",
    "level": "Medium",
    "title": "String Concatenation (Using strcat)",
    "description": "Write a C program that reads two separate strings from the user (e.g., first name and last name). Concatenate them into a third string with a space in between, and then print the full name. Use `strcat()` for concatenation.",
    "constraints": "Each string max 20 characters. Combined length max 50 characters.",
    "sampleInput": "John\nDoe",
    "sampleOutput": "Full Name: John Doe"
  },
  {
    "topic": "Strings",
    "level": "Medium",
    "title": "String Copy (Using strcpy)",
    "description": "Declare a source string `char src[] = \"Copy Me!\";`. Declare a destination character array large enough to hold the source string. Copy the contents of `src` to the destination array using `strcpy()`. Print the destination array to verify the copy.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "Copied string: Copy Me!"
  },
  {
    "topic": "Strings",
    "level": "Hard",
    "title": "Reverse a String In-Place",
    "description": "Write a C program that reads a string from the user (can contain spaces). Reverse the string *in-place* (without using an additional string/array for the reversed version) and then print the reversed string.",
    "constraints": "Max string length 50 characters.",
    "sampleInput": "hello world",
    "sampleOutput": "dlrow olleh"
  },
  {
    "topic": "Strings",
    "level": "Hard",
    "title": "Count Vowels, Consonants, Digits",
    "description": "Write a C program that reads a string from the user. Count the number of vowels (a, e, i, o, u, case-insensitive), consonants, and digits present in the string. Ignore spaces and special characters. Print the counts.",
    "constraints": "Max string length 100 characters. String can contain letters, numbers, spaces, and basic symbols.",
    "sampleInput": "Programming in C 123",
    "sampleOutput": "Vowels: 5\nConsonants: 10\nDigits: 3"
  },
  {
    "topic": "Strings",
    "level": "Hard",
    "title": "Palindrome Checker (Case-Insensitive)",
    "description": "Write a C program that takes a string as input and determines if it is a 'Palindrome' or 'Not a Palindrome'. A palindrome reads the same forwards and backwards (e.g., 'madam', 'level'). Your program should ignore case and spaces (e.g., 'Race car' should be considered a palindrome).",
    "constraints": "Max string length 50 characters. Contains only English letters and spaces.",
    "sampleInput": "Race Car",
    "sampleOutput": "Palindrome"
  },
  {
    "topic": "Strings",
    "level": "Tricky",
    "title": "Comparing Strings: `==` vs `strcmp`",
    "description": "Write a C program where you declare two strings `char str1[] = \"test\";` and `char str2[] = \"test\";`. Attempt to compare them using `if (str1 == str2)`. Also compare them using `if (strcmp(str1, str2) == 0)`. Print the result of both comparisons ('Equal' or 'Not Equal'). Explain why `==` behaves differently than `strcmp()` for strings in C.",
    "constraints": "None.",
    "sampleInput": "None",
    "sampleOutput": "Using ==: Not Equal\nUsing strcmp: Equal\n(User's explanation of pointer comparison vs. content comparison needed)"
  },
  {
    "topic": "Strings",
    "level": "Real World Problem",
    "title": "Basic Text Censorship",
    "description": "Write a C program that takes a sentence as input (max 100 chars). Then, read a 'bad word' (max 10 chars). Replace all occurrences of the 'bad word' in the sentence with asterisks ('*') of the same length as the bad word. Print the censored sentence. Assume case-sensitive replacement for simplicity. If the bad word is not found, print the original sentence.",
    "constraints": "Sentence max 100 chars. Bad word max 10 chars. No overlapping bad words.",
    "sampleInput": "This is a bad word example. Another bad word here.\nbad",
    "sampleOutput": "This is a *** word example. Another *** word here."
  }
]

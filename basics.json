[
  {
    "topic": "Basics and I/O",
    "level": "Easy",
    "title": "Hello, World! - Your First Footprint in C",
    "description": "Every journey begins with a single step, and in programming, that step is 'Hello, World!'. Your mission is to write a C program that simply prints the exact string 'Hello, World!' to the console. This problem introduces you to the barebones structure of a C program: including a header file (`stdio.h` for standard input/output), defining the `main` function (the entry point of your program), and using the `printf()` function for displaying output. Pay close attention to the syntax, especially the semicolon at the end of statements and the newline character `\\n` to ensure your output appears on a new line. In a Flutter app, this output would typically be displayed in a text widget.",
    "constraints": "Your program must compile and run using a standard C compiler. The output must be exactly 'Hello, World!' followed by a single newline character. No user input is required.",
    "sampleInput": "None",
    "sampleOutput": "Hello, World!\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Easy",
    "title": "Interactive Integer Display: Reading and Echoing Numbers",
    "description": "Now that you can make your program talk, let's make it listen! This problem teaches you how to accept input from the user. Your C program should read two whole numbers (integers) using the `scanf()` function. After reading, use `printf()` to display a message confirming the numbers the user entered. The Flutter app will provide the input fields (e.g., text boxes) for the user to enter these values, and then send them to your C code. Your C code's output will be the confirmation message displayed back in the Flutter app.",
    "constraints": "Both input integers will fit within the range of a standard `int` type (e.g., from -2,147,483,648 to 2,147,483,647). The output should precisely echo the input in a clear format.",
    "sampleInput": "5\n7",
    "sampleOutput": "You entered: 5 and 7\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Medium",
    "title": "Rectangle Geometry: Precision in Area & Perimeter",
    "description": "Moving beyond whole numbers, this problem introduces you to floating-point arithmetic and precise output formatting. Your task is to calculate the area and perimeter of a rectangle. The program should read the length and breadth of the rectangle as decimal values (e.g., `float` or `double`). Calculate the area (length $\\times$ breadth) and the perimeter (2 $\\times$ (length + breadth)). The critical part is to display both results formatted to exactly two decimal places. This requires understanding `%.2f` within `printf()` and the implications of using `float` vs. `double` for precision. The Flutter app will provide input fields for length and breadth, and display your C program's calculated results.",
    "constraints": "Length (l) and breadth (b) will be positive floating-point values between 0.1 and 1000.0. Use `double` for calculations to maintain precision. Output must be formatted to two decimal places.",
    "sampleInput": "5.5\n10.2",
    "sampleOutput": "Area = 56.10, Perimeter = 31.40\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Medium",
    "title": "Temperature Converter: Celsius to Fahrenheit with Formula Application",
    "description": "This problem focuses on applying a mathematical formula and handling floating-point numbers. Write a C program that converts a temperature from Celsius to Fahrenheit. The program should take a single floating-point input representing the temperature in Celsius. Use the standard conversion formula: $F = C \\times (9.0/5.0) + 32.0$. It's crucial to perform floating-point division (e.g., `9.0/5.0` instead of `9/5`) to get the correct result. Display the converted temperature in Fahrenheit, formatted to one decimal place. The Flutter app will supply the Celsius value and show the converted Fahrenheit result.",
    "constraints": "Celsius temperature (C) will be between -100.0 and 1000.0. The output must be formatted to exactly one decimal place. Ensure correct operator precedence and type promotion in your formula.",
    "sampleInput": "25.0",
    "sampleOutput": "77.0\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Medium",
    "title": "Swapping Values: Exploring Memory Manipulation Techniques",
    "description": "This problem delves deeper into how variables store data in memory. You need to read two integer values, 'a' and 'b'. Your goal is to swap their contents. Demonstrate two distinct methods to achieve this swap: \n1. **Using a Temporary Variable:** This is the most straightforward method, involving a third variable to temporarily hold one of the values. \n2. **Without a Temporary Variable (Arithmetic or Bitwise):** Explore techniques that swap values using only arithmetic operations (addition, subtraction) or bitwise XOR. This challenges your understanding of fundamental operators and their effects on binary representations. Your C program should output the values before and after each swap method, clearly labeling them. The Flutter app will provide the initial two numbers and display the step-by-step results.",
    "constraints": "Input integers 'a' and 'b' will be within the range of -10000 to 10000. Clearly label the output for each swapping method. The output should be concise and easily parsable by the Flutter app.",
    "sampleInput": "10 20",
    "sampleOutput": "Before swap: a = 10, b = 20\nAfter temp swap: a = 20, b = 10\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Hard",
    "title": "Character Secrets: ASCII Values and Type Interpretation",
    "description": "Every character you see on your screen, from 'A' to 'Z' and even spaces, has a numerical code associated with it â€“ its ASCII (American Standard Code for Information Interchange) value. This problem challenges you to uncover this secret. Write a C program that reads a single character from the input. Your program should then print the decimal (integer) ASCII value of that character. This problem is fundamental for understanding how C handles characters as small integers and introduces the concept of implicit type conversion (where a `char` can be treated as an `int`). The Flutter app will provide the character input.",
    "constraints": "The input will always be a single printable ASCII character. Your output should clearly state the character and its corresponding ASCII value.",
    "sampleInput": "G",
    "sampleOutput": "The ASCII value of 'G' is 71.\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Hard",
    "title": "Time Decomposer: Minutes to Years, Days, Hours, and Minutes",
    "description": "This problem pushes your understanding of integer division and the modulo operator (`%`). Imagine you're given a massive number of minutes (e.g., total minutes of a streamed movie marathon, or a simulation's run time). Your task is to decompose this total into its equivalent number of years, days, hours, and remaining minutes. Assume a year has exactly 365 days for simplicity (ignore leap years). The C program should read this large integer and then print the breakdown in a clear, readable format. This exercise is excellent for practicing sequential calculations and extracting different units from a larger whole. The Flutter app will provide the total minutes and display the computed breakdown.",
    "constraints": "The input 'total minutes' will be a positive integer, potentially up to the maximum value of a 32-bit `int` (approximately 2.1 billion). All calculations should use integer arithmetic where appropriate.",
    "sampleInput": "3456789",
    "sampleOutput": "6 years, 210 days, 0 hours, and 9 minutes.\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Tricky",
    "title": "Formatted Phone Number: Manual Digit Extraction and Presentation",
    "description": "This problem tests your ability to manipulate numbers and format output precisely without relying on advanced string functions (which you'll learn later). You need to read a 10-digit phone number as a single `long long` integer (to ensure it can hold all 10 digits). Your challenge is to then print this phone number in the standard format: `(XXX) XXX-XXXX`. To achieve this, you'll need to use a combination of integer division and the modulo operator (`%`) multiple times to isolate the area code, the next three digits, and the last four digits. This problem requires careful planning of arithmetic operations to 'extract' the desired parts of the number. The Flutter app will provide the 10-digit number.",
    "constraints": "The input will be a valid 10-digit positive integer. No string conversion or string manipulation functions are allowed; you must use arithmetic operations to extract digits for formatting.",
    "sampleInput": "1234567890",
    "sampleOutput": "(123) 456-7890\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Tricky",
    "title": "Dynamic Fuel Efficiency & Cost: User-Defined Fuel Type",
    "description": "You're building a more flexible fuel efficiency calculator for a driver. This time, the driver wants to choose if they input distance in Kilometers or Miles, and fuel in Liters or Gallons. The C program will receive three inputs from the Flutter app: the distance value (float), the fuel consumed value (float), and two characters indicating the chosen units (e.g., 'K' for Kilometers, 'L' for Liters). \n\nBased on these unit choices, your program should: \n1. Calculate the fuel efficiency in the corresponding units (e.g., km/L or miles/gallon), formatted to two decimal places. \n2. Additionally, receive the price per unit of the chosen fuel (float) and calculate the total fuel cost for the trip. \n3. Display both the fuel efficiency and total fuel cost. \n\nThis problem requires conditional logic (e.g., `if-else if-else` statements) to adapt calculations based on user input, making it 'Tricky' due to the need for multiple inputs that dictate logic paths. (Conversion factors: 1 mile = 1.60934 km; 1 US gallon = 3.78541 liters).",
    "constraints": "Distance, Fuel Consumed, and Fuel Price will be positive floating-point values. Unit choice inputs ('K', 'M', 'L', 'G') will be single characters. Your program must handle all four combinations of units. Output should be clean and clearly separated.",
    "sampleInput": "350.0\n20.0\nK L\n1.85",
    "sampleOutput": "Fuel Efficiency: 17.50 km/L\nTotal Fuel Cost: 37.00\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Real World Problem",
    "title": "Enhanced Currency Converter: Fixed Rates and Multiple Conversions",
    "description": "Imagine you're developing a simple currency converter for a traveler. Your C program should be able to convert a given amount from a base currency (e.g., USD) to two other target currencies (e.g., EUR and JPY) using pre-defined fixed exchange rates. \n\nYour program should: \n1. Define three constant exchange rates (e.g., `const double EUR_RATE = 0.92;` for 1 USD to EUR, `const double JPY_RATE = 155.00;` for 1 USD to JPY). \n2. Read the amount in the base currency (USD) as a floating-point number. \n3. Calculate the equivalent amount in both target currencies using the defined rates. \n4. Display the original amount and its converted values, each formatted to two decimal places. \n\nThis problem emphasizes the use of constants (`#define` or `const double`), multiple calculations, and clear, formatted output, simulating a common real-world financial utility. The Flutter app will provide the USD amount.",
    "constraints": "The input amount will be a positive floating-point value. Use `double` for currency calculations. Define fixed exchange rates as constants in your code. Output must be formatted to two decimal places and clearly state the currencies.",
    "sampleInput": "100.00",
    "sampleOutput": "100.00 USD is equivalent to:\n92.00 EUR\n15500.00 JPY\n"
  },
  {
    "topic": "Basics and I/O",
    "level": "Real World Problem",
    "title": "Basic BMI Calculator & Category Assigner",
    "description": "A health application often needs to calculate Body Mass Index (BMI). Your C program should read a person's weight in kilograms (kg) and height in meters (m) as floating-point values. Calculate the BMI using the formula: $BMI = Weight / (Height \\times Height)$. Display the calculated BMI, formatted to two decimal places. \n\n**Added Challenge (Tricky Part):** Based on the calculated BMI, also print a simple category: \n* Less than 18.5: Underweight\n* 18.5 to 24.9: Normal weight\n* 25.0 to 29.9: Overweight\n* 30.0 or greater: Obese\n\nThis introduces a simple decision-making element, requiring basic `if-else if-else` constructs (which you might explore ahead of time), making it a 'Tricky' real-world problem due to the conditional output. The Flutter app will handle input for weight and height, and display both the calculated BMI and its category.",
    "constraints": "Weight will be between 1.0 kg and 500.0 kg. Height will be between 0.1 m and 3.0 m. All inputs are positive floats. BMI output must be formatted to two decimal places. Implement the BMI category assignment correctly.",
    "sampleInput": "70.0\n1.75",
    "sampleOutput": "BMI: 22.86\nCategory: Normal weight\n"
  }
]




[
  {
    "topic": "Operators and Expressions",
    "level": "Easy",
    "title": "Basic Arithmetic Calculator",
    "description": "This problem introduces you to the fundamental arithmetic operators in C. Your program should read two integers. Then, calculate and print their sum, difference, product, quotient (integer division), and remainder (modulo). This exercise helps you understand how the `+` (addition), `-` (subtraction), `*` (multiplication), `/` (division), and `%` (modulo - remainder) operators work with integer data types. Pay attention to how integer division (`/`) behaves, which truncates the decimal part. The Flutter app will provide the two integer inputs.",
    "constraints": "Both input integers will be between -1000 and 1000. For the division and modulo operations, the second number will not be zero.",
    "sampleInput": "10\n3",
    "sampleOutput": "Sum: 13\nDifference: 7\nProduct: 30\nQuotient: 3\nRemainder: 1\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Easy",
    "title": "Increment and Decrement Operators: Prefix vs. Postfix",
    "description": "Explore the subtle yet important behavior of unary increment (`++`) and decrement (`--`) operators, specifically their prefix and postfix forms. Your C program should first initialize an integer variable (e.g., `int x = 5;`). Then, for each operation described below, you should *reset* `x` to its initial value (5) before applying the operation to ensure independent demonstrations. You'll print the value of the expression *and* the value of `x` after each operation: \n1. Demonstrate `x++` (postfix increment): `printf(\"Value of x++: %d, x is now: %d\\n\", x++, x);` \n2. Demonstrate `++x` (prefix increment): `printf(\"Value of ++x: %d, x is now: %d\\n\", ++x, x);` \n3. Demonstrate `x--` (postfix decrement): `printf(\"Value of x--: %d, x is now: %d\\n\", x--, x);` \n4. Demonstrate `--x` (prefix decrement): `printf(\"Value of --x: %d, x is now: %d\\n\", --x, x);` \nThis exercise is critical for understanding when the variable's value is used in an expression versus when it is actually updated. The Flutter app will trigger these demonstrations.",
    "constraints": "Initialize the variable `x` to 5 for each individual demonstration. Output must clearly show both the expression's result and the variable's final state.",
    "sampleInput": "None",
    "sampleOutput": "Initial x: 5\nValue of x++: 5, x is now: 6\nInitial x: 5\nValue of ++x: 6, x is now: 6\nInitial x: 5\nValue of x--: 5, x is now: 4\nInitial x: 5\nValue of --x: 4, x is now: 4\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Medium",
    "title": "Compound Assignment Operators: Shorthand Arithmetic",
    "description": "Understand how to use compound assignment operators (e.g., `+=`, `-=`, `*=`, `/=`, `%=`) for more concise arithmetic operations. These operators combine an arithmetic operation with an assignment. Your C program should: \n1. Initialize an integer variable `value = 10`. \n2. Add 5 to `value` using `value += 5;`. \n3. Subtract 3 from `value` using `value -= 3;`. \n4. Multiply `value` by 2 using `value *= 2;`. \n5. Divide `value` by 4 using `value /= 4;`. \n6. Find the remainder when `value` is divided by 3 using `value %= 3;`. \nPrint the `value` after each operation to see the cumulative effect. This problem helps you write more concise and often more efficient code by reducing redundancy. The Flutter app will initiate the sequence of operations.",
    "constraints": "Start `value` at 10. Perform operations in the exact specified order. Output must clearly show the value after each step.",
    "sampleInput": "None",
    "sampleOutput": "Initial value: 10\nAfter += 5: 15\nAfter -= 3: 12\nAfter *= 2: 24\nAfter /= 4: 6\nAfter %= 3: 0\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Medium",
    "title": "Relational and Logical Operators: Building Conditions",
    "description": "This problem introduces relational operators (`==`, `!=`, `<`, `>`, `<=`, `>=`) and logical operators (`&&` (AND), `||` (OR), `!` (NOT)). These operators are fundamental for creating conditions that control program flow. Your C program should read two integers, say 'A' and 'B'. Then, evaluate and print the result (1 for true, 0 for false in C) of the following expressions: \n1. A is equal to B (`A == B`) \n2. A is not equal to B (`A != B`) \n3. A is strictly greater than B (`A > B`) \n4. A is less than or equal to B (`A <= B`) \n5. (A is greater than 0) AND (B is less than 100) (`A > 0 && B < 100`) \n6. (A is negative) OR (B is zero) (`A < 0 || B == 0`) \n7. NOT (A is equal to B) (`!(A == B)`) \nThis problem is crucial for understanding how to build conditions for decision-making in C, which you'll use extensively in conditional statements (if/else) and loops. The Flutter app will provide the two integer inputs for A and B.",
    "constraints": "Integers A and B will be between -50 and 50. Output should be '0' or '1' for each boolean expression, clearly labeled.",
    "sampleInput": "10\n5",
    "sampleOutput": "A == B: 0\nA != B: 1\nA > B: 1\nA <= B: 0\n(A > 0 && B < 100): 1\n(A < 0 || B == 0): 0\n!(A == B): 1\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Hard",
    "title": "Bitwise Operations: Low-Level Data Manipulation",
    "description": "Delve into the fascinating world of bitwise operators (`&` (AND), `|` (OR), `^` (XOR), `~` (NOT), `<<` (Left Shift), `>>` (Right Shift)). These operators work directly on the individual bits of a number's binary representation. Your C program should read a single positive integer. Then, perform and print the results of the following bitwise operations (displaying the decimal result): \n1. Bitwise AND with 5 (`number & 5`) \n2. Bitwise OR with 10 (`number | 10`) \n3. Bitwise XOR with 3 (`number ^ 3`) \n4. Bitwise NOT (one's complement) (`~number`) - *Be aware that for positive integers, `~number` often results in a negative number due to two's complement representation. The specific negative value depends on the integer's size (e.g., 32-bit or 64-bit).* \n5. Left shift by 2 (`number << 2`) \n6. Right shift by 1 (`number >> 1`) \nThis problem introduces you to low-level data manipulation, which is powerful for tasks like setting/clearing flags, optimizing certain calculations, or working with hardware registers. The Flutter app will provide the integer input.",
    "constraints": "The input integer will be positive, between 0 and 255 (to observe clear changes in 8-bit or 16-bit contexts). For the NOT operation, clearly state that the result is system-dependent (e.g., on integer size) and typically negative for positive inputs.",
    "sampleInput": "7",
    "sampleOutput": "Initial number: 7\nBitwise AND with 5: 5\nBitwise OR with 10: 15\nBitwise XOR with 3: 4\nBitwise NOT (~7): -8 (Result may vary based on system integer size)\nLeft Shift by 2: 28\nRight Shift by 1: 3\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Hard",
    "title": "Sizeof Operator: Understanding Memory Consumption",
    "description": "The `sizeof` operator is a unique unary operator in C that returns the size, in bytes, of a variable or a data type. This is crucial for understanding how much memory your programs consume and can be important for memory management. Your C program should use `sizeof` to determine and print the size (in bytes) of the following fundamental data types in your specific C environment: \n* `char` \n* `short int` \n* `int` \n* `long int` \n* `long long int` \n* `float` \n* `double` \n* `long double` (if your compiler supports it, otherwise note its absence) \nThis problem provides direct insight into the memory footprint of different data types, which can vary across different compilers and operating systems. The Flutter app will simply display these system-specific results.",
    "constraints": "No user input required. Output must clearly label the size for each data type. Add a note that sizes might differ on other systems/compilers.",
    "sampleInput": "None",
    "sampleOutput": "Size of char: 1 byte\nSize of short int: 2 bytes\nSize of int: 4 bytes\nSize of long int: 4 bytes\nSize of long long int: 8 bytes\nSize of float: 4 bytes\nSize of double: 8 bytes\nSize of long double: 16 bytes (Note: Size can vary by compiler/system)\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Tricky",
    "title": "Operator Precedence and Associativity: Unraveling Complex Expressions",
    "description": "This problem truly challenges your understanding of how C evaluates complex expressions. Operator precedence (which operators are evaluated first) and associativity (how operators of the same precedence are grouped, usually left-to-right or right-to-left) are fundamental rules of the language. Your C program should: \n1. Read three integers: `a`, `b`, and `c`. \n2. Evaluate the following complex arithmetic expression and print its result: `int arithmetic_result = a + b * c / 2 - (a % b) + (10 >> 1);` \n3. Evaluate the following expression involving logical operators and print its result (1 for true, 0 for false): `int logical_result = (a > b && b < c) || !(c == a);` \nThis problem requires you to mentally (or with pen and paper) trace the order of operations, just as the C compiler would. It's a key step to avoid unexpected bugs in more complex programs. The Flutter app will provide the three integer inputs.",
    "constraints": "Integers `a`, `b`, `c` will be between 1 and 20. Ensure integer division and modulo operations are handled correctly according to C's rules. Output should clearly label each result.",
    "sampleInput": "5\n2\n8",
    "sampleOutput": "Arithmetic Expression Result: 13\nLogical Expression Result: 1\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Tricky",
    "title": "Electrical Power Calculator with Safety Check",
    "description": "In electronics, calculating power, voltage, and current is fundamental. Your C program needs to calculate electrical power (P) given voltage (V) and current (I). \n\nYour program should: \n1. Read two floating-point values: `voltage` (in Volts) and `current` (in Amperes). \n2. Calculate `power = voltage * current`. \n3. Display the calculated power in Watts, formatted to two decimal places. \n\n**Tricky Part:** Implement a safety check. If the calculated power exceeds a certain *critical* threshold (e.g., 1000.0 Watts), your program should print a 'High Power Consumption!' warning. Additionally, if the voltage is extremely low (e.g., less than 0.5 Volts) *and* the current is also very low (e.g., less than 0.1 Amperes), print a 'Device Might Be Off or Faulty.' message. This adds multiple conditional checks and reinforces the use of relational and logical operators in a practical scenario. The Flutter app will provide the voltage and current inputs.",
    "constraints": "Voltage (V) and Current (I) will be positive floating-point values (0.0 to 1000.0). Output power to two decimal places. Implement the 'High Power Consumption' warning for >1000.0 Watts and 'Device Might Be Off or Faulty.' for V < 0.5 && I < 0.1.",
    "sampleInput": "220.5\n5.0",
    "sampleOutput": "Calculated Power: 1102.50 Watts\nHigh Power Consumption!\n"
  },
  {
    "topic": "Operators and Expressions",
    "level": "Real World Problem",
    "title": "Average Speed Calculator with Time Conversion and Safety",
    "description": "A common need for drivers and athletes is to calculate average speed. Your C program should read the total distance traveled in kilometers (float) and the total time taken, provided as separate integers for hours and minutes. \n\nYour program should: \n1. Read `distance_km` (float). \n2. Read `hours` (int) and `minutes` (int). \n3. Convert the total time into a single floating-point value representing total hours (e.g., if hours=1, minutes=30, total_hours = 1.5). This conversion needs careful floating-point division: `total_hours = hours + (minutes / 60.0);` \n4. Calculate average speed: `speed = distance_km / total_hours`. \n5. Display the average speed in km/h, formatted to two decimal places. \n\n**Tricky Part:** Implement robust error handling. If `total_hours` calculates to zero (e.g., 0 hours and 0 minutes input), you *cannot* divide by zero. In this case, print an error message like 'Error: Time cannot be zero.' instead of the speed. This emphasizes real-world error prevention using conditional logic and operators. The Flutter app will provide the distance, hours, and minutes.",
    "constraints": "Distance (km) will be positive (0.1 to 10000.0). Hours (0 to 24), Minutes (0 to 59). Ensure accurate floating-point division for time conversion. Crucially, handle `total_hours` being zero to prevent runtime errors.",
    "sampleInput": "150.0\n1\n30",
    "sampleOutput": "Distance: 150.00 km\nTime: 1 hour 30 minutes\nAverage Speed: 100.00 km/h\n"
  }
]

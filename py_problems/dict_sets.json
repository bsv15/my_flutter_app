[
  {
    "topic": "Dictionaries and Sets",
    "level": "Easy",
    "title": "Create and Access Dictionary Values",
    "description": "This problem introduces Python **dictionaries**, which are unordered, mutable collections of key-value pairs. Keys must be unique and immutable (like strings, numbers, or tuples), while values can be of any type. Your task is to: \n1. Create a dictionary named `student_info` with at least three key-value pairs, representing information about a student (e.g., 'name', 'age', 'major'). \n2. Print the entire `student_info` dictionary. \n3. Access and print the value associated with one of the keys (e.g., 'name'). \n4. Attempt to access a key that does not exist and demonstrate how to handle it gracefully using the `get()` method with a default value.",
    "constraints": "Create a dictionary with at least 3 key-value pairs. Print the entire dictionary. Access and print a specific value using its key. Use `get()` to access a non-existent key and provide a default message. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Student Info: {'name': 'Alice', 'age': 20, 'major': 'Computer Science'}\nStudent's Name: Alice\nStudent's GPA: Not available\n",
    "explanation": "A dictionary `student_info` is initialized with keys 'name', 'age', and 'major'. The entire dictionary is printed. `student_info['name']` directly accesses the value associated with the 'name' key. `student_info.get('gpa', 'Not available')` attempts to get the value for 'gpa'. Since 'gpa' doesn't exist, it returns the provided default string 'Not available', demonstrating a safe way to access potentially missing keys."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Easy",
    "title": "Add, Update, and Remove Dictionary Items",
    "description": "This problem focuses on modifying dictionaries after creation by adding new key-value pairs, updating existing ones, and removing items. Your task is to: \n1. Create a dictionary named `car` with initial key-value pairs like {'brand': 'Ford', 'model': 'Mustang', 'year': 1964}. \n2. Print the initial `car` dictionary. \n3. Add a new key-value pair 'color': 'red' to the dictionary. \n4. Update the value of an existing key, e.g., change 'year' to 2020. \n5. Remove the 'model' key-value pair from the dictionary using `pop()`. \n6. Print the dictionary after each modification.",
    "constraints": "Start with a dictionary of at least 3 key-value pairs. Add one new key-value pair. Update the value of an existing key. Remove one key-value pair using `pop()`. Print the dictionary after each modification. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Initial car: {'brand': 'Ford', 'model': 'Mustang', 'year': 1964}\nCar after adding color: {'brand': 'Ford', 'model': 'Mustang', 'year': 1964, 'color': 'red'}\nCar after updating year: {'brand': 'Ford', 'model': 'Mustang', 'year': 2020, 'color': 'red'}\nCar after removing model: {'brand': 'Ford', 'year': 2020, 'color': 'red'}\n",
    "explanation": "The `car` dictionary is initialized. `car['color'] = 'red'` adds a new key-value pair. `car['year'] = 2020` updates the value for the existing 'year' key. `car.pop('model')` removes the 'model' key and its associated value. The dictionary is printed after each step to show the modifications."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Easy",
    "title": "Create and Perform Set Operations",
    "description": "This problem introduces **sets**, which are unordered collections of unique, immutable elements. Sets are useful for membership testing and eliminating duplicate entries. Your task is to: \n1. Create two sets named `set_a` and `set_b` with some common and some unique integer elements. \n2. Print both sets. \n3. Calculate and print the **union** of the two sets. \n4. Calculate and print the **intersection** of the two sets. \n5. Calculate and print the **difference** (`set_a - set_b`). \nThis demonstrates basic set creation and common set operations.",
    "constraints": "Create two sets with integers, ensure some overlap and some unique elements. Print both original sets. Print the union (`|` or `.union()`). Print the intersection (`&` or `.intersection()`). Print the difference (`-` or `.difference()`) of `set_a` from `set_b`. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Set A: {1, 2, 3, 4, 5}\nSet B: {4, 5, 6, 7, 8}\nUnion of A and B: {1, 2, 3, 4, 5, 6, 7, 8}\nIntersection of A and B: {4, 5}\nDifference (A - B): {1, 2, 3}\n",
    "explanation": "Two sets, `set_a` and `set_b`, are created. The program then demonstrates various set operations: `set_a | set_b` (or `set_a.union(set_b)`) combines all unique elements from both sets. `set_a & set_b` (or `set_a.intersection(set_b)`) finds elements common to both. `set_a - set_b` (or `set_a.difference(set_b)`) finds elements present in `set_a` but not in `set_b`. All results are printed."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Easy",
    "title": "Iterate Through Dictionary Keys and Values",
    "description": "This problem shows how to iterate through the contents of a dictionary using `for` loops, accessing both keys and values. Your task is to: \n1. Create a dictionary named `inventory` where keys are item names (strings) and values are quantities (integers). Include at least 3 items. \n2. Iterate through the dictionary and print only the **keys** on separate lines. \n3. Iterate through the dictionary and print only the **values** on separate lines. \n4. Iterate through the dictionary and print both **keys and values** on separate lines, formatted as 'Key: [key], Value: [value]'.",
    "constraints": "Create a dictionary with at least 3 key-value pairs. Use separate loops to print keys only, values only, and then both keys and values. Use `for key in dict:`, `dict.values()`, and `dict.items()` respectively. Print clearly for each part. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Inventory Keys:\napple\nbanana\norange\n\nInventory Values:\n10\n5\n8\n\nInventory Items:\nKey: apple, Value: 10\nKey: banana, Value: 5\nKey: orange, Value: 8\n",
    "explanation": "The `inventory` dictionary is initialized. `for item_name in inventory:` iterates directly over keys. `for quantity in inventory.values():` iterates over values. `for item_name, quantity in inventory.items():` iterates over key-value pairs simultaneously, which is the most common way to access both. Each section demonstrates a different iteration method."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Medium",
    "title": "Word Frequency Counter",
    "description": "This problem combines string processing with dictionaries to count the frequency of each word in a given text. It's a classic application of dictionaries for counting occurrences. Your task is to: \n1. Prompt the user to enter a sentence or a phrase. \n2. Convert the input string to lowercase to ensure case-insensitivity (e.g., 'Hello' and 'hello' are treated as the same word). \n3. Remove any punctuation (e.g., '.', ',', '!', '?', etc.) from the string. A simple approach is to iterate through known punctuation characters and replace them with spaces or empty strings. \n4. Split the cleaned string into a list of words. \n5. Create a dictionary where keys are words and values are their counts. Iterate through the words, updating their counts in the dictionary. \n6. Print each word and its frequency, sorted alphabetically by word.",
    "constraints": "Prompt for a sentence. Convert input to lowercase. Remove common punctuation. Split into words. Create a dictionary to store word counts. Print words and their counts, sorted alphabetically by word. Assume words are separated by spaces. Use `try-except` for any unexpected input issues if applicable (though less likely here).",
    "sampleInput": "Enter a sentence: Hello world! This is a test. Hello again, world.",
    "sampleOutput": "Enter a sentence: Hello world! This is a test. Hello again, world.\nWord Frequencies:\nagain: 1\na: 1\nhello: 2\nis: 1\nworld: 2\ntest: 1\nthis: 1\n",
    "explanation": "The program gets input, converts it to lowercase. It then iterates through a predefined set of punctuation characters, replacing them with spaces to separate words. `text.split()` creates a list of words. An empty `word_counts` dictionary is created. The code then loops through each `word`: if the word is already a key, its count is incremented; otherwise, it's added with a count of 1. Finally, it iterates through the sorted keys of `word_counts` to print each word and its frequency."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Medium",
    "title": "Check for Anagrams using Dictionaries/Sets",
    "description": "This problem involves determining if two strings are **anagrams** of each other (meaning they contain the same characters with the same frequencies, but in a different order). This is a good use case for character counting, often done with dictionaries. Your task is to: \n1. Prompt the user to enter two words (strings). \n2. Convert both words to lowercase and remove any spaces (or other non-alphabetic characters if desired, but for simplicity, just lowercase and no spaces). \n3. Create a dictionary for each word to store the frequency of each character. \n4. Compare these two frequency dictionaries. If they are identical, the words are anagrams. \n5. Print whether the two words are anagrams or not. \n\n**Hint:** Alternatively, sorting the characters of both words and comparing the sorted strings is a simpler Pythonic way, but the dictionary approach helps practice dictionary usage.",
    "constraints": "Prompt for two string inputs. Convert to lowercase and remove spaces for comparison. Use dictionaries to store character frequencies for each word. Compare the two dictionaries. Print whether they are anagrams or not. Assume alphanumeric characters. `try-except` for input not strictly needed here.",
    "sampleInput": "Enter first word: listen\nEnter second word: silent",
    "sampleOutput": "Enter first word: listen\nEnter second word: silent\n'listen' and 'silent' are anagrams.\n",
    "explanation": "The program takes two words as input, converts them to lowercase, and removes spaces. The `count_char_frequencies` helper function iterates through a string, building a dictionary where keys are characters and values are their counts. The main part of the code calls this function for both input words to get `freq_map1` and `freq_map2`. If these two dictionaries are exactly equal (`==`), the words are anagrams, and the appropriate message is printed."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Medium",
    "title": "Set Membership Test and Subset Check",
    "description": "This problem focuses on demonstrating set membership (`in` operator) and subset/superset relationships, which are efficient operations for checking element presence and collection containment. Your task is to: \n1. Create a `set_of_skills` (e.g., {'Python', 'SQL', 'Git', 'Cloud'}). \n2. Prompt the user to enter a skill to check if it's in the set. Print whether it is or isn't. \n3. Create a `required_skills` set (e.g., {'Python', 'SQL'}). \n4. Check if `required_skills` is a subset of `set_of_skills` using the `.issubset()` method. Print the result. \n5. Check if `set_of_skills` is a superset of `required_skills` using the `.issuperset()` method. Print the result. \nThis reinforces key set functionalities beyond basic arithmetic operations.",
    "constraints": "Create a `set_of_skills` and a `required_skills` set with some overlap. Prompt user for a skill and check membership using `in`. Print membership result. Use `.issubset()` and `.issuperset()` to check relationships between the two sets. Print the results for subset/superset checks. Assume string inputs.",
    "sampleInput": "Enter a skill to check: Git",
    "sampleOutput": "My skills: {'Python', 'SQL', 'Git', 'Cloud'}\nRequired skills: {'Python', 'SQL'}\n\nEnter a skill to check: Git\n'Git' is in my skills.\nRequired skills are a subset of my skills: True\nMy skills are a superset of required skills: True\n",
    "explanation": "The `set_of_skills` and `required_skills` are defined. The program prompts the user for a skill and uses the `in` operator to check its presence, printing the result. Then, `required_skills.issubset(set_of_skills)` checks if all elements of `required_skills` are in `set_of_skills`. `set_of_skills.issuperset(required_skills)` checks if `set_of_skills` contains all elements of `required_skills`. Both return boolean values, which are printed."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Hard",
    "title": "Merge Multiple Dictionaries (Handling Conflicts)",
    "description": "This problem involves merging multiple dictionaries into a single dictionary, which is a common task in data aggregation. The challenge lies in deciding how to handle cases where keys exist in multiple dictionaries. Your task is to: \n1. Create three dictionaries: `dict1`, `dict2`, and `dict3`. Ensure some keys are unique to each, and some keys overlap (e.g., 'price' might be in multiple, but with different values). \n2. Print the initial dictionaries. \n3. Merge these three dictionaries into a single `merged_dict`. If a key exists in multiple dictionaries, the value from the **later dictionary** in the merge order should take precedence. \n4. Print the `merged_dict`. \n\n**Hint:** In Python 3.5+, you can use dictionary unpacking (`**`) to easily merge dictionaries. For older versions, loop through items or use `update()`.",
    "constraints": "Create 3 dictionaries with overlapping and unique keys. Print initial dictionaries. Merge them into a single dictionary. For overlapping keys, the value from the *last* dictionary merged should override previous ones. Print the final merged dictionary. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Dict 1: {'a': 1, 'b': 2, 'c': 3}\nDict 2: {'c': 4, 'd': 5, 'e': 6}\nDict 3: {'e': 7, 'f': 8, 'g': 9}\n\nMerged dictionary (later values take precedence): {'a': 1, 'b': 2, 'c': 4, 'd': 5, 'e': 7, 'f': 8, 'g': 9}\n",
    "explanation": "Three dictionaries (`dict1`, `dict2`, `dict3`) are created. The `merged_dict = {**dict1, **dict2, **dict3}` syntax (available in Python 3.5+) is used. This unpacks each dictionary's key-value pairs into a new dictionary. When a key exists in multiple dictionaries (e.g., 'c' in `dict1` and `dict2`, 'e' in `dict2` and `dict3`), the value from the dictionary appearing later in the unpacking sequence (e.g., `dict2` then `dict3`) overwrites previous values. The final merged dictionary is then printed."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Hard",
    "title": "Reverse Dictionary Mapping (Value to List of Keys)",
    "description": "This problem involves transforming a dictionary into a new one where the original values become keys, and the original keys become values (or lists of values if multiple keys map to the same original value). This is a common requirement in data analysis to reverse lookups. Your task is to: \n1. Create a dictionary named `student_majors` where keys are student names (strings) and values are their majors (strings). Include some students with the same major. \n2. Print the original `student_majors` dictionary. \n3. Create a new dictionary named `major_students` where keys are majors and values are lists of student names who have that major. \n4. Iterate through the `student_majors` dictionary to populate `major_students`. For each major, append the student's name to the corresponding list in `major_students`. \n5. Print the `major_students` dictionary. \n\n**Hint:** When adding a new major, you'll need to initialize its value as an empty list before appending the first student's name. You can use `dict.setdefault()` or a conditional check.",
    "constraints": "Create an initial dictionary mapping names to majors, with some duplicate majors. Print the original dictionary. Create a new dictionary mapping majors to *lists* of names. Populate this new dictionary by iterating through the original. Print the new dictionary. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Original student_majors: {'Alice': 'CS', 'Bob': 'Math', 'Charlie': 'CS', 'David': 'Physics', 'Eve': 'Math'}\n\nMajor to Students mapping:\n{'CS': ['Alice', 'Charlie'], 'Math': ['Bob', 'Eve'], 'Physics': ['David']}\n",
    "explanation": "The `student_majors` dictionary is initialized. An empty `major_students` dictionary is created. The code then iterates through the `student_majors.items()`. For each `student, major` pair: \n1.  `major_students.setdefault(major, []).append(student)` is used. `setdefault(major, [])` checks if `major` is a key in `major_students`. If not, it adds `major` as a key with an empty list `[]` as its value and returns that list. If `major` already exists, it just returns the existing list. \n2.  `append(student)` then adds the current `student` to that list. \nThis efficiently builds the `major_students` dictionary, grouping students by their major. The final dictionary is printed."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Tricky",
    "title": "Count Unique Words from Text File (Case-Insensitive)",
    "description": "This problem combines file handling with sets to efficiently count the number of unique words in a text file, ignoring case and punctuation. It's a fundamental text processing task. Your task is to: \n1. Create a sample text file named `sample_text.txt` with a few sentences, including duplicate words and varying capitalization/punctuation. \n2. Prompt the user to enter the filename. \n3. Read the content of the file. \n4. Process the text to extract all words, making them lowercase and removing punctuation. \n5. Store these processed words in a **set** to automatically handle uniqueness. \n6. Print the total count of unique words. \n7. Print the first 10 unique words (or fewer if less than 10) in alphabetical order. \n\n**Hint:** Use `str.lower()`, `str.isalpha()` to filter characters, and `str.split()` for word separation. Handle `FileNotFoundError`.",
    "constraints": "Create a `sample_text.txt`. Prompt for filename. Read file content. Process words: convert to lowercase, remove non-alphabetic characters. Use a `set` to store unique words. Print the total count of unique words. Print the first 10 unique words alphabetically. Handle `FileNotFoundError` using `try-except`. Assume words are separated by spaces or punctuation.",
    "sampleInput": "Enter filename: sample_text.txt",
    "sampleOutput": "Enter filename: sample_text.txt\nFile 'sample_text.txt' read successfully.\nTotal unique words: 7\nFirst 7 unique words (alphabetical): ['a', 'hello', 'is', 'test', 'this', 'world']\n",
    "explanation": "The program creates a `sample_text.txt` file. It then prompts for the filename. A `try-except FileNotFoundError` block handles opening the file. Inside, it reads the content. It then processes the text: `text.lower()` converts to lowercase. A loop iterates through characters, keeping only alphabetic ones and splitting the result into words. These words are added to a `set` named `unique_words`, which automatically handles duplicates. The `len()` of the set gives the unique word count. Finally, `sorted(list(unique_words))[:10]` gets and prints the first 10 unique words alphabetically."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Tricky",
    "title": "Group List Elements by Property into Dictionary",
    "description": "This problem involves transforming a list of items into a dictionary where elements are grouped based on a common property. This is a common data aggregation task. Your task is to: \n1. Create a list of tuples named `products`, where each tuple represents a product: `(product_name, category, price)`. Include at least 5 products with various categories. \n2. Print the original `products` list. \n3. Create a new dictionary named `categorized_products` where keys are `category` names (strings) and values are lists of `product_name`s belonging to that category. \n4. Iterate through the `products` list and populate `categorized_products`. \n5. Print the `categorized_products` dictionary. \n\n**Hint:** Similar to the 'Reverse Dictionary Mapping' problem, you'll need to initialize a list for each new category. `dict.setdefault()` is very useful here.",
    "constraints": "Create a list of tuples as specified (`(str, str, float)`). Print initial list. Create a new dictionary `categorized_products` mapping category (string) to a list of product names (strings). Populate this dictionary by iterating through the original `products` list. Print the final `categorized_products` dictionary. No user input required.",
    "sampleInput": "None (values hardcoded)",
    "sampleOutput": "Original products: [('Laptop', 'Electronics', 1200.0), ('Keyboard', 'Electronics', 75.0), ('Orange', 'Fruit', 1.5), ('Banana', 'Fruit', 0.8), ('Monitor', 'Electronics', 300.0), ('Apple', 'Fruit', 1.2)]\n\nProducts categorized by type:\n{'Electronics': ['Laptop', 'Keyboard', 'Monitor'], 'Fruit': ['Orange', 'Banana', 'Apple']}\n",
    "explanation": "The `products` list of tuples is defined. An empty `categorized_products` dictionary is created. The program iterates through each `product` tuple. For each `product_name, category, price`: `categorized_products.setdefault(category, []).append(product_name)` is used. This adds the `category` as a key if it's new (with an empty list as its value) or returns the existing list, and then appends the `product_name` to that list. This effectively groups product names by their category, and the final dictionary is printed."
  },
  {
    "topic": "Dictionaries and Sets",
    "level": "Real World Problem",
    "title": "User Profile Management (Login/Registration)",
    "description": "You are developing a simplified user profile management system. This system will store usernames and passwords in a dictionary. It needs to handle user registration (adding new users) and user login (verifying credentials). \n\nYour task is to: \n1. Initialize an empty dictionary `user_profiles = {}` to store `username: password` pairs. \n2. Present a menu to the user: '1. Register', '2. Login', '3. Exit'. \n3. Implement a loop that continues until the user chooses '3': \n    * If '1' (Register): \n        * Prompt for a `new_username` and `new_password`. \n        * If `new_username` already exists in `user_profiles`, print 'Username already taken.' \n        * Else, add the `new_username: new_password` pair to `user_profiles` and print 'Registration successful.'. \n    * If '2' (Login): \n        * Prompt for `username` and `password`. \n        * Check if `username` exists in `user_profiles` AND if the provided `password` matches the stored password. \n        * If both match, print 'Login successful!'. \n        * Else, print 'Invalid username or password.'. \n    * If '3' (Exit), break the loop and print 'Exiting program.'. \n    * For any other choice, print 'Invalid choice. Please try again.'. \n\nThis problem simulates a practical use of dictionaries for storing and managing user credentials, requiring conditional logic and continuous interaction.",
    "constraints": "Initialize an empty dictionary for `user_profiles`. Implement a menu-driven loop. For registration, check for existing usernames (case-sensitive). For login, check for both username existence and password match. Print appropriate success/failure messages for all actions. Use `break` for exit. Assume valid string inputs for usernames/passwords.",
    "sampleInput": "1\nalice\npass123\n1\nbob\nsecurepass\n2\nalice\npass123\n2\nbob\nwrongpass\n3",
    "sampleOutput": "1. Register\n2. Login\n3. Exit\nEnter your choice: 1\nEnter new username: alice\nEnter new password: pass123\nRegistration successful.\n\n1. Register\n2. Login\n3. Exit\nEnter your choice: 1\nEnter new username: bob\nEnter new password: securepass\nRegistration successful.\n\n1. Register\n2. Login\n3. Exit\nEnter your choice: 2\nEnter username: alice\nEnter password: pass123\nLogin successful!\n\n1. Register\n2. Login\n3. Exit\nEnter your choice: 2\nEnter username: bob\nEnter password: wrongpass\nInvalid username or password.\n\n1. Register\n2. Login\n3. Exit\nEnter your choice: 3\nExiting program.\n",
    "explanation": "The program initializes an empty `user_profiles` dictionary. It enters a `while True` loop to present the menu. \n* **Register (choice '1'):** It prompts for username and password. It checks `if new_username in user_profiles:` to see if the username is taken. If not, it adds the `new_username: new_password` pair to the dictionary. \n* **Login (choice '2'):** It prompts for username and password. It checks `if username in user_profiles and user_profiles[username] == password:`. This ensures both the username exists and the provided password matches. \n* **Exit (choice '3'):** The loop `break`s. \nThis demonstrates dictionaries as a simple in-memory database for user credentials, suitable for a basic authentication system."
  }
]